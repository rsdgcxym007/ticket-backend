#!/usr/bin/env node

/**
 * üß™ Test Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô
 */

const axios = require('axios');
const readline = require('readline');

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Base URL ‡∏Ç‡∏≠‡∏á API
const BASE_URL = 'http://localhost:3000';
const API_ENDPOINTS = {
  // Order endpoints
  createSeatedOrder: '/api/order/seated',
  createStandingOrder: '/api/order/standing',

  // Payment endpoints
  makePayment: '/api/payment',

  // Email endpoints
  sendTicketEmail: '/api/email/send-ticket',
  getEmailTemplates: '/api/email/templates',

  // Test endpoints
  testEmail: '/api/email/test',
};

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const TEST_DATA = {
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  customers: [
    {
      name: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏™‡∏°‡∏¥‡∏ó',
      email: 'test@example.com',
      phone: '0812345678',
    },
    {
      name: 'John Doe',
      email: 'john.doe@gmail.com',
      phone: '0823456789',
    },
    {
      name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö',
      email: 'system.test@yahoo.com',
      phone: '0834567890',
    },
  ],

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
  seatedTickets: [
    {
      zoneId: 'zone-vip',
      seatNumbers: ['A1', 'A2'],
      quantity: 2,
      pricePerSeat: 1500,
      showDate: '2025-08-20',
    },
    {
      zoneId: 'zone-premium',
      seatNumbers: ['B5', 'B6', 'B7'],
      quantity: 3,
      pricePerSeat: 1200,
      showDate: '2025-08-21',
    },
  ],

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô
  standingTickets: [
    {
      adultQty: 2,
      childQty: 1,
      adultPrice: 800,
      childPrice: 400,
      showDate: '2025-08-22',
    },
    {
      adultQty: 4,
      childQty: 0,
      adultPrice: 800,
      childPrice: 400,
      showDate: '2025-08-23',
    },
  ],
};

// ‡∏™‡∏µ ANSI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö console
const COLORS = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
function log(message, color = COLORS.reset) {
  console.log(`${color}${message}${COLORS.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, COLORS.green);
}

function logError(message) {
  log(`‚ùå ${message}`, COLORS.red);
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, COLORS.blue);
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, COLORS.yellow);
}

function logHeader(message) {
  console.log('\n' + '='.repeat(60));
  log(`${message}`, COLORS.bright + COLORS.cyan);
  console.log('='.repeat(60));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠ user input
function askQuestion(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer);
    });
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö delay
function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á HTTP request
async function makeRequest(method, endpoint, data = null, headers = {}) {
  try {
    const config = {
      method: method.toLowerCase(),
      url: `${BASE_URL}${endpoint}`,
      headers: {
        'Content-Type': 'application/json',
        ...headers,
      },
    };

    if (data) {
      config.data = data;
    }

    const response = await axios(config);
    return {
      success: true,
      data: response.data,
      status: response.status,
    };
  } catch (error) {
    return {
      success: false,
      error: error.response?.data || error.message,
      status: error.response?.status || 500,
    };
  }
}

// ‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
async function testApiConnection() {
  logHeader('üîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API');

  try {
    const response = await makeRequest('GET', '/health');
    if (response.success) {
      logSuccess('API ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      logInfo(`Status: ${response.status}`);
      return true;
    } else {
      logError('API ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return false;
    }
  } catch (error) {
    logError(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API: ${error.message}`);
    return false;
  }
}

// üìß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
async function testEmailSystem() {
  logHeader('üìß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•');

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Email Templates
  logInfo('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö Email Templates...');
  const templatesResponse = await makeRequest(
    'GET',
    API_ENDPOINTS.getEmailTemplates,
  );

  if (templatesResponse.success) {
    logSuccess('‡∏î‡∏∂‡∏á Email Templates ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    console.log(JSON.stringify(templatesResponse.data, null, 2));
  } else {
    logError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Email Templates');
    console.log(templatesResponse.error);
  }

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß
  const testCustomer = TEST_DATA.customers[0];
  const ticketEmailData = {
    orderId: 'TEST-001',
    recipientEmail: testCustomer.email,
    recipientName: testCustomer.name,
    ticketType: '‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    quantity: 2,
    showDate: '2025-08-20',
    totalAmount: 3000,
    seatNumbers: ['A1', 'A2'],
    includeQRCode: true,
    notes: '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•',
  };

  logInfo('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß...');
  const emailResponse = await makeRequest(
    'POST',
    API_ENDPOINTS.sendTicketEmail,
    ticketEmailData,
  );

  if (emailResponse.success) {
    logSuccess(`‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${testCustomer.email}`);
  } else {
    logError('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    console.log(emailResponse.error);
  }
}

// üé´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
async function testSeatedTicketOrder() {
  logHeader('üé´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á');

  const customer = TEST_DATA.customers[0];
  const ticketInfo = TEST_DATA.seatedTickets[0];

  const orderData = {
    customerName: customer.name,
    customerEmail: customer.email,
    customerPhone: customer.phone,
    zoneId: ticketInfo.zoneId,
    seatNumbers: ticketInfo.seatNumbers,
    quantity: ticketInfo.quantity,
    pricePerSeat: ticketInfo.pricePerSeat,
    showDate: ticketInfo.showDate,
    notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á',
  };

  logInfo('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á...');
  const orderResponse = await makeRequest(
    'POST',
    API_ENDPOINTS.createSeatedOrder,
    orderData,
  );

  if (orderResponse.success) {
    logSuccess('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    logInfo(`Order ID: ${orderResponse.data.orderId}`);
    logInfo(`Order Number: ${orderResponse.data.orderNumber}`);
    logInfo(`Total Amount: ‡∏ø${orderResponse.data.totalAmount}`);

    return {
      orderId: orderResponse.data.orderId,
      orderNumber: orderResponse.data.orderNumber,
      totalAmount: orderResponse.data.totalAmount,
      customerEmail: customer.email,
      flow: 'SEATED',
    };
  } else {
    logError('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    console.log(orderResponse.error);
    return null;
  }
}

// üé™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô
async function testStandingTicketOrder() {
  logHeader('üé™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô');

  const customer = TEST_DATA.customers[1];
  const ticketInfo = TEST_DATA.standingTickets[0];

  const orderData = {
    customerName: customer.name,
    customerEmail: customer.email,
    customerPhone: customer.phone,
    standingAdultQty: ticketInfo.adultQty,
    standingChildQty: ticketInfo.childQty,
    adultPrice: ticketInfo.adultPrice,
    childPrice: ticketInfo.childPrice,
    showDate: ticketInfo.showDate,
    notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô',
  };

  logInfo('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô...');
  const orderResponse = await makeRequest(
    'POST',
    API_ENDPOINTS.createStandingOrder,
    orderData,
  );

  if (orderResponse.success) {
    logSuccess('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    logInfo(`Order ID: ${orderResponse.data.orderId}`);
    logInfo(`Order Number: ${orderResponse.data.orderNumber}`);
    logInfo(`Total Amount: ‡∏ø${orderResponse.data.totalAmount}`);

    return {
      orderId: orderResponse.data.orderId,
      orderNumber: orderResponse.data.orderNumber,
      totalAmount: orderResponse.data.totalAmount,
      customerEmail: customer.email,
      flow: 'STANDING',
    };
  } else {
    logError('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    console.log(orderResponse.error);
    return null;
  }
}

// üí≥ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
async function testPaymentAndEmail(orderInfo) {
  logHeader(`üí≥ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ${orderInfo.flow}`);

  // ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
  const partialAmount = Math.floor(orderInfo.totalAmount / 2);

  logInfo(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô: ‡∏ø${partialAmount}`);
  const partialPaymentData = {
    orderId: orderInfo.orderId,
    amount: partialAmount,
    method: 'CASH',
    notes: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
  };

  const partialPaymentResponse = await makeRequest(
    'POST',
    API_ENDPOINTS.makePayment,
    partialPaymentData,
  );

  if (partialPaymentResponse.success) {
    logSuccess('‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•)');
    logInfo(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞: ‡∏ø${partialAmount}`);
    logInfo(`‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ‡∏ø${orderInfo.totalAmount - partialAmount}`);
  } else {
    logError('‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    console.log(partialPaymentResponse.error);
    return false;
  }

  // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ä‡∏≥‡∏£‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
  await delay(2000);

  const remainingAmount = orderInfo.totalAmount - partialAmount;
  logInfo(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ‡∏ø${remainingAmount}`);

  const finalPaymentData = {
    orderId: orderInfo.orderId,
    amount: remainingAmount,
    method: 'TRANSFER',
    notes: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö - ‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß',
  };

  const finalPaymentResponse = await makeRequest(
    'POST',
    API_ENDPOINTS.makePayment,
    finalPaymentData,
  );

  if (finalPaymentResponse.success) {
    logSuccess('‚ú® ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß‡πÅ‡∏•‡πâ‡∏ß)');
    logInfo(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ: ‡∏ø${remainingAmount}`);
    logInfo(`‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞: ‡∏ø${orderInfo.totalAmount}`);
    logInfo(`üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${orderInfo.customerEmail}`);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    if (finalPaymentResponse.data.payment) {
      const payment = finalPaymentResponse.data.payment;
      logInfo(`Payment ID: ${payment.id}`);
      logInfo(`Payment Status: ${payment.status || 'COMPLETED'}`);
      logInfo(
        `Is Fully Paid: ${finalPaymentResponse.data.isFullyPaid ? 'YES' : 'NO'}`,
      );
    }

    return true;
  } else {
    logError('‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    console.log(finalPaymentResponse.error);
    return false;
  }
}

// üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
function showTestSummary(results) {
  logHeader('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');

  const passed = results.filter((r) => r.success).length;
  const total = results.length;

  log(
    `‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${passed}/${total} ‡∏ú‡πà‡∏≤‡∏ô`,
    passed === total ? COLORS.green : COLORS.yellow,
  );

  console.log('\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
  results.forEach((result, index) => {
    const status = result.success ? '‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' : '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô';
    const color = result.success ? COLORS.green : COLORS.red;
    log(`${index + 1}. ${result.name}: ${status}`, color);
    if (!result.success && result.error) {
      log(`   Error: ${result.error}`, COLORS.red);
    }
  });

  if (passed === total) {
    logSuccess('\nüéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!');
  } else {
    logWarning('\n‚ö†Ô∏è  ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
  }
}

// üöÄ Main Test Function
async function runAllTests() {
  console.clear();
  logHeader('üß™ TICKET EMAIL SYSTEM - COMPREHENSIVE TEST');
  log('‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', COLORS.bright);

  const testResults = [];

  try {
    // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
    logInfo('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö...\n');
    const apiConnected = await testApiConnection();
    testResults.push({
      name: '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API',
      success: apiConnected,
    });

    if (!apiConnected) {
      logError(
        '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà',
      );
      showTestSummary(testResults);
      return;
    }

    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    try {
      await testEmailSystem();
      testResults.push({
        name: '‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•',
        success: true,
      });
    } catch (error) {
      testResults.push({
        name: '‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•',
        success: false,
        error: error.message,
      });
    }

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
    let seatedOrderInfo = null;
    try {
      seatedOrderInfo = await testSeatedTicketOrder();
      testResults.push({
        name: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á',
        success: !!seatedOrderInfo,
      });
    } catch (error) {
      testResults.push({
        name: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á',
        success: false,
        error: error.message,
      });
    }

    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô
    let standingOrderInfo = null;
    try {
      standingOrderInfo = await testStandingTicketOrder();
      testResults.push({
        name: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô',
        success: !!standingOrderInfo,
      });
    } catch (error) {
      testResults.push({
        name: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô',
        success: false,
        error: error.message,
      });
    }

    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
    if (seatedOrderInfo) {
      try {
        const seatedPaymentSuccess = await testPaymentAndEmail(seatedOrderInfo);
        testResults.push({
          name: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á)',
          success: seatedPaymentSuccess,
        });
      } catch (error) {
        testResults.push({
          name: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á)',
          success: false,
          error: error.message,
        });
      }
    }

    // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô
    if (standingOrderInfo) {
      try {
        const standingPaymentSuccess =
          await testPaymentAndEmail(standingOrderInfo);
        testResults.push({
          name: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô)',
          success: standingPaymentSuccess,
        });
      } catch (error) {
        testResults.push({
          name: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô)',
          success: false,
          error: error.message,
        });
      }
    }
  } catch (error) {
    logError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${error.message}`);
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  showTestSummary(testResults);

  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  console.log('\n' + '='.repeat(60));
  logInfo('üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
  console.log('1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô inbox ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
  console.log('2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•');
  console.log('3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö QR Code ‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏î‡πâ');
  console.log('4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö responsive design ‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠');
  console.log('='.repeat(60));
}

// Interactive Menu
async function showInteractiveMenu() {
  while (true) {
    console.log('\n' + '='.repeat(50));
    log('üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', COLORS.bright + COLORS.cyan);
    console.log('1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
    console.log('2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•');
    console.log('3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á');
    console.log('4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô');
    console.log('5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Connection');
    console.log('0. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°');
    console.log('='.repeat(50));

    const choice = await askQuestion('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç (0-5): ');

    switch (choice) {
      case '1':
        await runAllTests();
        break;
      case '2':
        await testEmailSystem();
        break;
      case '3':
        const seatedOrder = await testSeatedTicketOrder();
        if (seatedOrder) {
          await testPaymentAndEmail(seatedOrder);
        }
        break;
      case '4':
        const standingOrder = await testStandingTicketOrder();
        if (standingOrder) {
          await testPaymentAndEmail(standingOrder);
        }
        break;
      case '5':
        await testApiConnection();
        break;
      case '0':
        log('üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö!', COLORS.green);
        process.exit(0);
      default:
        logWarning('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 0-5');
    }

    await askQuestion('\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...');
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
if (require.main === module) {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö...');

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö arguments
  const args = process.argv.slice(2);
  if (args.includes('--auto') || args.includes('-a')) {
    runAllTests();
  } else {
    showInteractiveMenu();
  }
}

module.exports = {
  runAllTests,
  testEmailSystem,
  testSeatedTicketOrder,
  testStandingTicketOrder,
  testPaymentAndEmail,
};
