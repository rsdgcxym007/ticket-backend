import {
  Controller,
  Get,
  Post,
  Body,
  Param,
  Query,
  UseGuards,
  Request,
  Logger,
  Put,
} from '@nestjs/common';
import { MobileService } from './mobile.service';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { ThailandTimeHelper } from '../common/utils/thailand-time.helper';
import { Throttle } from '@nestjs/throttler';

@ApiTags('üì± Mobile API')
@Controller('mobile')
export class MobileController {
  private readonly logger = new Logger(MobileController.name);

  constructor(private readonly mobileService: MobileService) {}

  /**
   * üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏≠‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
   */
  @Get('home')
  @Throttle({ default: { limit: 50, ttl: 60000 } }) // 50 requests per minute
  @ApiOperation({
    summary: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏≠‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠',
    description:
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏≠‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠',
    schema: {
      type: 'object',
      properties: {
        announcements: {
          type: 'array',
          description: '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£',
          items: {
            type: 'object',
            properties: {
              id: { type: 'string' },
              title: { type: 'string' },
              content: { type: 'string' },
              type: { type: 'string' },
              priority: { type: 'string' },
              isActive: { type: 'boolean' },
              createdAt: { type: 'string' },
            },
          },
        },
        promotions: {
          type: 'array',
          description: '‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
          items: {
            type: 'object',
            properties: {
              id: { type: 'string' },
              title: { type: 'string' },
              description: { type: 'string' },
              discountPercent: { type: 'number' },
              validUntil: { type: 'string' },
              imageUrl: { type: 'string' },
            },
          },
        },
        upcomingEvents: {
          type: 'array',
          description: '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á',
          items: {
            type: 'object',
            properties: {
              id: { type: 'string' },
              title: { type: 'string' },
              eventDate: { type: 'string' },
              venue: { type: 'string' },
              ticketPrice: { type: 'number' },
              availableSeats: { type: 'number' },
            },
          },
        },
        quickStats: {
          type: 'object',
          description: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
          properties: {
            totalEvents: { type: 'number' },
            totalSeats: { type: 'number' },
            availableSeats: { type: 'number' },
            popularZones: { type: 'array', items: { type: 'string' } },
          },
        },
      },
    },
  })
  async getHomeData() {
    this.logger.log('üè† ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏≠‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠');
    return this.mobileService.getHomeData();
  }

  /**
   * üé´ ‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   */
  @Get('zones/available')
  @Throttle({ default: { limit: 30, ttl: 60000 } }) // 30 requests per minute for zone data
  @ApiOperation({
    summary: '‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≠‡∏á',
    description:
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          name: { type: 'string' },
          description: { type: 'string' },
          price: { type: 'number' },
          totalSeats: { type: 'number' },
          availableSeats: { type: 'number' },
          bookedSeats: { type: 'number' },
          occupancyRate: { type: 'number' },
          zone: { type: 'string' },
          isActive: { type: 'boolean' },
          features: { type: 'array', items: { type: 'string' } },
        },
      },
    },
  })
  async getAvailableZones() {
    this.logger.log('üé´ ‡∏î‡∏∂‡∏á‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    return this.mobileService.getAvailableZones();
  }

  /**
   * üìç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏ã‡∏ô
   */
  //  * üìç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏ã‡∏ô
  //
  @Get('zones/:id')
  @ApiOperation({
    summary: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á',
    description:
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ã‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á',
    schema: {
      type: 'object',
      properties: {
        id: { type: 'string' },
        name: { type: 'string' },
        description: { type: 'string' },
        price: { type: 'number' },
        totalSeats: { type: 'number' },
        availableSeats: { type: 'number' },
        bookedSeats: { type: 'number' },
        seatMap: {
          type: 'object',
          description: '‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á',
          properties: {
            rows: { type: 'array', items: { type: 'string' } },
            columns: { type: 'array', items: { type: 'number' } },
            unavailableSeats: { type: 'array', items: { type: 'string' } },
            bookedSeats: { type: 'array', items: { type: 'string' } },
            premiumSeats: { type: 'array', items: { type: 'string' } },
          },
        },
        features: { type: 'array', items: { type: 'string' } },
        policies: { type: 'array', items: { type: 'string' } },
      },
    },
  })
  async getZoneDetails(
    @Param('id') id: string,
    @Query('eventDate') eventDate?: string,
  ) {
    this.logger.log(`üìç ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏ã‡∏ô ${id}`);
    const targetDate =
      eventDate || ThailandTimeHelper.format(ThailandTimeHelper.now());
    return this.mobileService.getZoneDetails(id, targetDate);
  }

  /**
   * üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
   */
  @Get('zones/:id/seat-map')
  @ApiOperation({
    summary: '‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏ã‡∏ô',
    description: '‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠',
  })
  @ApiResponse({
    status: 200,
    description: '‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏ã‡∏ô',
    schema: {
      type: 'object',
      properties: {
        zoneId: { type: 'string' },
        zoneName: { type: 'string' },
        seatMap: {
          type: 'object',
          properties: {
            rows: { type: 'array', items: { type: 'string' } },
            columns: { type: 'array', items: { type: 'number' } },
            seats: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  id: { type: 'string' },
                  row: { type: 'string' },
                  column: { type: 'number' },
                  seatNumber: { type: 'string' },
                  status: {
                    type: 'string',
                    enum: ['available', 'booked', 'occupied', 'unavailable'],
                  },
                  price: { type: 'number' },
                  isPremium: { type: 'boolean' },
                },
              },
            },
            legend: {
              type: 'object',
              properties: {
                available: { type: 'string' },
                booked: { type: 'string' },
                occupied: { type: 'string' },
                unavailable: { type: 'string' },
                premium: { type: 'string' },
              },
            },
          },
        },
      },
    },
  })
  async getSeatMap(
    @Param('id') zoneId: string,
    @Query('eventDate') eventDate?: string,
  ) {
    this.logger.log(`üó∫Ô∏è ‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÇ‡∏ã‡∏ô ${zoneId}`);
    const targetDate =
      eventDate || ThailandTimeHelper.format(ThailandTimeHelper.now());
    return this.mobileService.getSeatMap(zoneId, targetDate);
  }

  /**
   * üë§ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   */
  @Get('orders')
  @Throttle({ default: { limit: 20, ttl: 60000 } }) // 20 requests per minute for order data
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({
    summary: '‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    description: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          orderNumber: { type: 'string' },
          status: { type: 'string' },
          totalAmount: { type: 'number' },
          ticketType: { type: 'string' },
          eventDate: { type: 'string' },
          seatDetails: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                zoneName: { type: 'string' },
                seatNumber: { type: 'string' },
                price: { type: 'number' },
              },
            },
          },
          qrCode: { type: 'string' },
          createdAt: { type: 'string' },
          paymentMethod: { type: 'string' },
          paymentStatus: { type: 'string' },
        },
      },
    },
  })
  async getUserOrders(@Request() req: any) {
    this.logger.log(`üë§ ‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${req.user.id}`);
    return this.mobileService.getUserOrders(req.user.id);
  }

  /**
   * üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   */
  @Get('history')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({
    summary: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    description: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    schema: {
      type: 'object',
      properties: {
        totalOrders: { type: 'number' },
        totalSpent: { type: 'number' },
        totalEvents: { type: 'number' },
        favoriteZones: { type: 'array', items: { type: 'string' } },
        recentOrders: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: { type: 'string' },
              orderNumber: { type: 'string' },
              eventDate: { type: 'string' },
              totalAmount: { type: 'number' },
              status: { type: 'string' },
              createdAt: { type: 'string' },
            },
          },
        },
      },
    },
  })
  async getUserHistory(@Request() req: any) {
    this.logger.log(`üìã ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${req.user.id}`);
    return this.mobileService.getUserHistory(req.user.id);
  }

  /**
   * üîç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Get('orders/:id/status')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({
    summary: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö Real-time',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå',
    schema: {
      type: 'object',
      properties: {
        orderId: { type: 'string' },
        orderNumber: { type: 'string' },
        status: { type: 'string' },
        statusText: { type: 'string' },
        paymentStatus: { type: 'string' },
        paymentMethod: { type: 'string' },
        totalAmount: { type: 'number' },
        eventDate: { type: 'string' },
        timeline: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              status: { type: 'string' },
              timestamp: { type: 'string' },
              description: { type: 'string' },
            },
          },
        },
        nextAction: {
          type: 'object',
          properties: {
            action: { type: 'string' },
            description: { type: 'string' },
            actionUrl: { type: 'string' },
          },
        },
      },
    },
  })
  async getOrderStatus(@Param('id') orderId: string, @Request() req: any) {
    this.logger.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${orderId}`);
    return this.mobileService.getOrderStatus(orderId, req.user.id);
  }

  /**
   * üì± QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Get('orders/:id/qr')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({
    summary: 'QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå',
    description: '‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô',
  })
  @ApiResponse({
    status: 200,
    description: 'QR Code ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå',
    schema: {
      type: 'object',
      properties: {
        orderId: { type: 'string' },
        qrCode: { type: 'string' },
        qrCodeUrl: { type: 'string' },
        expiresAt: { type: 'string' },
        instructions: { type: 'array', items: { type: 'string' } },
      },
    },
  })
  async getOrderQR(@Param('id') orderId: string, @Request() req: any) {
    this.logger.log(`üì± ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${orderId}`);
    return this.mobileService.getOrderQR(orderId, req.user.id);
  }

  /**
   * üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   */
  @Get('stats')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({
    summary: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    description: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    schema: {
      type: 'object',
      properties: {
        totalOrders: { type: 'number' },
        totalSpent: { type: 'number' },
        totalEvents: { type: 'number' },
        currentMonth: {
          type: 'object',
          properties: {
            orders: { type: 'number' },
            spent: { type: 'number' },
            events: { type: 'number' },
          },
        },
        favoriteZones: { type: 'array', items: { type: 'string' } },
        membershipLevel: { type: 'string' },
        pointsEarned: { type: 'number' },
        pointsAvailable: { type: 'number' },
        achievements: { type: 'array', items: { type: 'string' } },
      },
    },
  })
  async getUserStats(@Request() req: any) {
    this.logger.log(`üìä ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${req.user.id}`);
    return this.mobileService.getUserStats(req.user.id);
  }

  /**
   * üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£
   */
  @Get('announcements')
  @ApiOperation({
    summary: '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£',
    description: '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          title: { type: 'string' },
          content: { type: 'string' },
          type: {
            type: 'string',
            enum: ['INFO', 'WARNING', 'PROMOTION', 'MAINTENANCE'],
          },
          priority: {
            type: 'string',
            enum: ['LOW', 'MEDIUM', 'HIGH', 'URGENT'],
          },
          isActive: { type: 'boolean' },
          showUntil: { type: 'string' },
          createdAt: { type: 'string' },
          imageUrl: { type: 'string' },
          actionUrl: { type: 'string' },
        },
      },
    },
  })
  async getAnnouncements(@Query('type') type?: string) {
    this.logger.log('üì¢ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£');
    return this.mobileService.getAnnouncements(type);
  }

  /**
   * üìù ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   */
  @Put('profile')
  @Throttle({ default: { limit: 10, ttl: 60000 } }) // 10 profile updates per minute
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({
    summary: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        message: { type: 'string' },
        user: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            email: { type: 'string' },
            firstName: { type: 'string' },
            lastName: { type: 'string' },
            phoneNumber: { type: 'string' },
            preferences: { type: 'object' },
            updatedAt: { type: 'string' },
          },
        },
      },
    },
  })
  async updateProfile(
    @Request() req: any,
    @Body()
    updateData: {
      firstName?: string;
      lastName?: string;
      phoneNumber?: string;
      preferences?: any;
    },
  ) {
    this.logger.log(`üìù ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${req.user.id}`);
    return this.mobileService.updateUserProfile(req.user.id, updateData);
  }

  /**
   * üîî ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   */
  @Post('notifications/settings')
  @Throttle({ default: { limit: 5, ttl: 60000 } }) // 5 notification updates per minute
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({
    summary: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
    description: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        message: { type: 'string' },
        settings: {
          type: 'object',
          properties: {
            pushNotifications: { type: 'boolean' },
            emailNotifications: { type: 'boolean' },
            smsNotifications: { type: 'boolean' },
            promotionNotifications: { type: 'boolean' },
            orderUpdates: { type: 'boolean' },
            eventReminders: { type: 'boolean' },
          },
        },
      },
    },
  })
  async updateNotificationSettings(
    @Request() req: any,
    @Body()
    settings: {
      pushNotifications?: boolean;
      emailNotifications?: boolean;
      smsNotifications?: boolean;
      promotionNotifications?: boolean;
      orderUpdates?: boolean;
      eventReminders?: boolean;
    },
  ) {
    this.logger.log(`üîî ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${req.user.id}`);
    return this.mobileService.updateNotificationSettings(req.user.id, settings);
  }
}
