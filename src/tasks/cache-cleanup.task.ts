import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { CacheService } from '../common/services/cache.service';

@Injectable()
export class CacheCleanupTask {
  private readonly logger = new Logger(CacheCleanupTask.name);

  constructor(private readonly cacheService: CacheService) {}

  /**
   * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Cache ‡∏ó‡∏∏‡∏Å 15 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏•‡∏î‡∏à‡∏≤‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
   */
  @Cron('0 */15 * * * *') // Every 15 minutes instead of every 5 minutes
  async cleanupExpiredCache() {
    this.logger.log('üßπ Starting cache cleanup...');

    const statsBefore = this.cacheService.getStats();
    this.cacheService.cleanup();
    const statsAfter = this.cacheService.getStats();

    const cleaned = statsBefore.totalKeys - statsAfter.totalKeys;

    if (cleaned > 0) {
      this.logger.log(`‚úÖ Cleaned up ${cleaned} expired cache entries`);
    }

    this.logger.debug(`üìä Cache stats: ${statsAfter.totalKeys} active keys`);
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Å‡πà‡∏≤)
   */
  @Cron(CronExpression.EVERY_HOUR)
  async resetAllCache() {
    this.logger.log('üîÑ Performing hourly cache reset...');

    const stats = this.cacheService.getStats();
    this.cacheService.clear();

    this.logger.log(`‚ôªÔ∏è Reset ${stats.totalKeys} cache entries for fresh data`);
  }
}
