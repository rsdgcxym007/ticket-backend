import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, LessThan, MoreThanOrEqual, Between, Raw } from 'typeorm';
import { Order } from '../order/order.entity';
import { SeatBooking } from '../seats/seat-booking.entity';
import { OrderStatus, BookingStatus } from '../common/enums';
import { DateTimeHelper } from '../common/utils';
import { AttendanceStatus } from '../common/enums';

@Injectable()
export class OrderExpiryService {
  private readonly logger = new Logger(OrderExpiryService.name);

  constructor(
    @InjectRepository(Order)
    private orderRepo: Repository<Order>,
    @InjectRepository(SeatBooking)
    private seatBookingRepo: Repository<SeatBooking>,
  ) {}

  /**
   * ‚è∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏•‡∏î‡∏à‡∏≤‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ)
   */
  @Cron('0 */5 * * * *') // Every 5 minutes instead of every minute
  async handleExpiredOrders() {
    try {
      const now = DateTimeHelper.now();

      // ‡∏´‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß
      const expiredOrders = await this.orderRepo.find({
        where: {
          status: OrderStatus.PENDING,
          expiresAt: LessThan(now),
        },
        relations: ['seatBookings', 'seatBookings.seat'],
      });

      if (expiredOrders.length === 0) {
        this.logger.debug('üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤');
        return;
      }

      this.logger.log(`‚è∞ ‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ${expiredOrders.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

      for (const order of expiredOrders) {
        await this.expireOrder(order);
      }

      this.logger.log(
        `‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ${expiredOrders.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      );
    } catch (error) {
      this.logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤:', error);
    }
  }

  /**
   * üé≠ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AttendanceStatus ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô
   */
  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)
  async updateAttendanceStatus() {
    try {
      this.logger.log('üé≠ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AttendanceStatus...');

      const todayString = DateTimeHelper.formatDate(
        DateTimeHelper.now(),
        'YYYY-MM-DD',
      );

      const pendingAttendanceOrders = await this.orderRepo.find({
        where: {
          showDate: Raw((alias) => `${alias} = :todayString`, { todayString }),
          attendanceStatus: AttendanceStatus.PENDING,
        },
      });

      if (pendingAttendanceOrders.length === 0) {
        this.logger.debug('üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AttendanceStatus');
        return;
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AttendanceStatus ‡πÄ‡∏õ‡πá‡∏ô NO_SHOW
      const orderIds = pendingAttendanceOrders.map((order) => order.id);
      await this.orderRepo.update(orderIds, {
        attendanceStatus: AttendanceStatus.NO_SHOW,
        updatedAt: DateTimeHelper.now(),
      });

      this.logger.log(
        `‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AttendanceStatus ‡πÄ‡∏õ‡πá‡∏ô NO_SHOW ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${orderIds.length} ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå`,
      );
    } catch (error) {
      this.logger.error(
        '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AttendanceStatus:',
        error,
      );
    }
  }

  /**
   * üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
   */
  private async expireOrder(order: Order): Promise<void> {
    try {
      this.logger.log(`üö´ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${order.id}`);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
      await this.orderRepo.update(order.id, {
        status: OrderStatus.EXPIRED,
        updatedAt: DateTimeHelper.now(),
      });

      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
      if (order.seatBookings && order.seatBookings.length > 0) {
        const bookingIds = order.seatBookings.map((booking) => booking.id);

        await this.seatBookingRepo.update(bookingIds, {
          status: BookingStatus.EXPIRED,
          updatedAt: DateTimeHelper.now(),
        });

        this.logger.log(
          `üí∫ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á ${order.seatBookings.length} ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á`,
        );
      }

      // TODO: ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      // await this.notificationService.sendOrderExpiredNotification(order);

      this.logger.log(`‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${order.id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    } catch (error) {
      this.logger.error(
        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${order.id}:`,
        error,
      );
      throw error;
    }
  }

  /**
   * üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô
   */
  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)
  async cleanupOldData() {
    try {
      this.logger.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...');

      const thirtyDaysAgo = DateTimeHelper.addDays(DateTimeHelper.now(), -30);

      // ‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏ß‡∏±‡∏ô
      const deletedOrders = await this.orderRepo.delete({
        status: OrderStatus.EXPIRED,
        updatedAt: LessThan(thirtyDaysAgo),
      });

      // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏ß‡∏±‡∏ô
      const deletedBookings = await this.seatBookingRepo.delete({
        status: BookingStatus.EXPIRED,
        updatedAt: LessThan(thirtyDaysAgo),
      });

      this.logger.log(
        `üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ - ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${deletedOrders.affected} ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${deletedBookings.affected}`,
      );
    } catch (error) {
      this.logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    }
  }

  /**
   * üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô
   */
  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)
  async generateExpiryReport() {
    try {
      this.logger.log('üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤...');

      const today = DateTimeHelper.startOfDay(DateTimeHelper.now());
      const tomorrow = DateTimeHelper.addDays(today, 1);

      // ‡∏ô‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      const expiredTodayCount = await this.orderRepo.count({
        where: {
          status: OrderStatus.EXPIRED,
          updatedAt: LessThan(tomorrow),
          expiresAt: LessThan(today),
        },
      });

      // ‡∏ô‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
      const pendingCount = await this.orderRepo.count({
        where: {
          status: OrderStatus.PENDING,
        },
      });

      this.logger.log(
        `üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤: ${expiredTodayCount} ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${pendingCount}`,
      );

      // TODO: ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ Admin
      // await this.notificationService.sendDailyExpiryReport({
      //   expiredToday: expiredTodayCount,
      //   pending: pendingCount,
      //   date: DateTimeHelper.formatDate(today),
      // });
    } catch (error) {
      this.logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:', error);
    }
  }

  /**
   * ‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏•‡∏î‡∏à‡∏≤‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
   */
  @Cron('0 */3 * * * *') // Every 5 minutes instead of every 30 seconds
  async notifyExpiringOrders() {
    try {
      const now = DateTimeHelper.now();
      const warningTime = DateTimeHelper.addMinutes(now, 2); // 2 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤

      const expiringOrders = await this.orderRepo.find({
        where: {
          status: OrderStatus.PENDING,
          expiresAt: LessThan(warningTime),
        },
        relations: ['user'],
      });

      for (const order of expiringOrders) {
        const minutesLeft = DateTimeHelper.timeUntilExpiry(order.expiresAt);

        if (minutesLeft <= 2 && minutesLeft > 0) {
          this.logger.warn(
            `‚è≥ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${order.id} ‡∏à‡∏∞‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ`,
          );

          // TODO: ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          // await this.notificationService.sendExpiryWarning(order, minutesLeft);
        }
      }
    } catch (error) {
      this.logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:', error);
    }
  }

  /**
   * üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏•‡∏î‡∏à‡∏≤‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
   */
  @Cron('0 */30 * * * *') // Every 30 minutes instead of every 5 minutes
  async healthCheck() {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
      const stuckOrdersCount = await this.orderRepo.count({
        where: {
          status: OrderStatus.PENDING,
          createdAt: LessThan(
            DateTimeHelper.addHours(DateTimeHelper.now(), -1),
          ),
        },
      });

      if (stuckOrdersCount > 0) {
        this.logger.warn(
          `‚ö†Ô∏è ‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á: ${stuckOrdersCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
        );
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
      const orphanedBookingsCount = await this.seatBookingRepo
        .createQueryBuilder('booking')
        .leftJoin('booking.order', 'order')
        .where('order.id IS NULL')
        .getCount();

      if (orphanedBookingsCount > 0) {
        this.logger.warn(
          `‚ö†Ô∏è ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${orphanedBookingsCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
        );
      }
    } catch (error) {
      this.logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö:', error);
    }
  }

  /**
   * üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
   */
  @Cron(CronExpression.EVERY_HOUR)
  async hourlyStats() {
    try {
      const oneHourAgo = DateTimeHelper.addHours(DateTimeHelper.now(), -1);

      const stats = await this.orderRepo
        .createQueryBuilder('order')
        .select('order.status', 'status')
        .addSelect('COUNT(*)', 'count')
        .where('order.updatedAt >= :oneHourAgo', { oneHourAgo })
        .groupBy('order.status')
        .getRawMany();

      const statsMap = stats.reduce((acc, stat) => {
        acc[stat.status] = parseInt(stat.count);
        return acc;
      }, {});

      this.logger.log(`üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß: ${JSON.stringify(statsMap)}`);
    } catch (error) {
      this.logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:', error);
    }
  }
}
