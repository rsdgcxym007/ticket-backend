import { Injectable, Logger } from '@nestjs/common';
import { TicketOrderOCR } from '../common/interfaces';

@Injectable()
export class OcrService {
  private readonly logger = new Logger(OcrService.name);

  /**
   * üîç ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  async processSlipImage(imageBuffer: Buffer): Promise<TicketOrderOCR | null> {
    try {
      this.logger.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏•‡∏¥‡∏õ...');

      // TODO: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á OCR Library (‡πÄ‡∏ä‡πà‡∏ô Tesseract, Google Vision API)
      // const ocrResult = await this.performOCR(imageBuffer);

      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå OCR ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      const mockOcrResult = await this.mockOcrProcessing(imageBuffer);

      if (mockOcrResult) {
        this.logger.log('‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        return mockOcrResult;
      }

      this.logger.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ');
      return null;
    } catch (error) {
      this.logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏¥‡∏õ:', error);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ');
    }
  }

  /**
   * ü§ñ ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
   */
  private async mockOcrProcessing(
    imageBuffer: Buffer,
  ): Promise<TicketOrderOCR | null> {
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    await new Promise((resolve) => setTimeout(resolve, 1000));

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥)
    if (imageBuffer.length < 1000) {
      return null;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
    const mockData: TicketOrderOCR = {
      orderNumber: `HKT-${Math.floor(Math.random() * 99999) + 10000}`,
      customerName: 'Sample Customer',
      customerPhone: '+66812345678',
      ticketType: 'Ringside',
      quantity: 2,
      price: 3600,
      paymentStatus: 'Paid',
      paymentMethod: 'Bank Transfer',
      travelDate: new Date().toISOString().split('T')[0],
      orderDate: new Date().toISOString().split('T')[0],
      pickupHotel: 'Sample Hotel',
      dropoffLocation: 'Stadium',
      voucherCode: 'ABC123',
      referenceNo: `REF${Date.now()}`,
      source: 'DIRECT',
      seatNumbers: ['A1', 'A2'],
      note: 'OCR Processed',
    };

    return mockData;
  }

  /**
   * üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OCR
   */
  async validateOcrData(ocrData: TicketOrderOCR): Promise<{
    isValid: boolean;
    errors: string[];
    warnings: string[];
  }> {
    const errors: string[] = [];
    const warnings: string[] = [];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!ocrData.orderNumber) {
      errors.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠');
    }

    if (!ocrData.customerName) {
      errors.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
    }

    if (!ocrData.ticketType) {
      errors.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏±‡πã‡∏ß');
    }

    if (!ocrData.quantity || ocrData.quantity <= 0) {
      errors.push('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡πã‡∏ß‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    if (!ocrData.price || ocrData.price <= 0) {
      errors.push('‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    if (!ocrData.travelDate) {
      errors.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°
    if (!ocrData.customerPhone) {
      warnings.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå');
    }

    if (!ocrData.paymentMethod) {
      warnings.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô');
    }

    if (!ocrData.source) {
      warnings.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠');
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings,
    };
  }

  /**
   * üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OCR
   */
  async analyzeConfidence(ocrData: TicketOrderOCR): Promise<{
    overallConfidence: number;
    fieldConfidence: Record<string, number>;
    suggestions: string[];
  }> {
    const fieldConfidence: Record<string, number> = {};
    const suggestions: string[] = [];

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
    fieldConfidence.orderNumber = this.calculateFieldConfidence(
      ocrData.orderNumber,
    );
    fieldConfidence.customerName = this.calculateFieldConfidence(
      ocrData.customerName,
    );
    fieldConfidence.ticketType = this.calculateFieldConfidence(
      ocrData.ticketType,
    );
    fieldConfidence.quantity = ocrData.quantity ? 0.9 : 0;
    fieldConfidence.price = ocrData.price ? 0.9 : 0;
    fieldConfidence.travelDate = this.calculateFieldConfidence(
      ocrData.travelDate,
    );

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏£‡∏ß‡∏°
    const confidenceValues = Object.values(fieldConfidence);
    const overallConfidence =
      confidenceValues.reduce((sum, conf) => sum + conf, 0) /
      confidenceValues.length;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    if (overallConfidence < 0.7) {
      suggestions.push('‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }

    if (fieldConfidence.orderNumber < 0.8) {
      suggestions.push('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠');
    }

    if (fieldConfidence.customerName < 0.8) {
      suggestions.push('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
    }

    return {
      overallConfidence: Math.round(overallConfidence * 100) / 100,
      fieldConfidence,
      suggestions,
    };
  }

  /**
   * üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå
   */
  private calculateFieldConfidence(value: string | undefined): number {
    if (!value) return 0;

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
    const length = value.length;
    const hasSpecialChars = /[^a-zA-Z0-9\s]/.test(value);
    const hasNumbers = /\d/.test(value);
    const hasLetters = /[a-zA-Z]/.test(value);

    let confidence = 0.5;

    if (length >= 3) confidence += 0.2;
    if (length >= 5) confidence += 0.1;
    if (hasNumbers && hasLetters) confidence += 0.1;
    if (!hasSpecialChars) confidence += 0.1;

    return Math.min(confidence, 1.0);
  }

  /**
   * üîÑ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OCR
   */
  cleanOcrData(ocrData: TicketOrderOCR): TicketOrderOCR {
    return {
      ...ocrData,
      orderNumber: this.cleanString(ocrData.orderNumber),
      customerName: this.cleanString(ocrData.customerName),
      customerPhone: this.cleanPhoneNumber(ocrData.customerPhone),
      ticketType: this.normalizeTicketType(ocrData.ticketType),
      paymentMethod: this.cleanString(ocrData.paymentMethod),
      travelDate: this.normalizeDateString(ocrData.travelDate),
      orderDate: this.normalizeDateString(ocrData.orderDate),
      pickupHotel: this.cleanString(ocrData.pickupHotel),
      dropoffLocation: this.cleanString(ocrData.dropoffLocation),
      voucherCode: this.cleanString(ocrData.voucherCode),
      referenceNo: this.cleanString(ocrData.referenceNo),
      source: this.normalizeSource(ocrData.source),
      note: this.cleanString(ocrData.note),
    };
  }

  /**
   * üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   */
  private cleanString(str: string | undefined): string {
    if (!str) return '';
    return str.trim().replace(/\s+/g, ' ');
  }

  /**
   * üì± ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
   */
  private cleanPhoneNumber(phone: string | undefined): string {
    if (!phone) return '';

    // ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞ +
    const cleaned = phone.replace(/[^\d+]/g, '');

    // ‡πÅ‡∏õ‡∏•‡∏á 0 ‡πÄ‡∏õ‡πá‡∏ô +66 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏¢
    if (cleaned.startsWith('0')) {
      return '+66' + cleaned.substring(1);
    }

    return cleaned;
  }

  /**
   * üé´ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏±‡πã‡∏ß
   */
  private normalizeTicketType(type: string | undefined): string {
    if (!type) return '';

    const normalized = type.toLowerCase();

    if (normalized.includes('ringside')) return 'RINGSIDE';
    if (normalized.includes('stadium')) return 'STADIUM';
    if (normalized.includes('standing')) return 'STANDING';
    if (normalized.includes('vip')) return 'VIP';

    return type.toUpperCase();
  }

  /**
   * üìÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
   */
  private normalizeDateString(dateStr: string | undefined): string {
    if (!dateStr) return '';

    try {
      const date = new Date(dateStr);
      if (isNaN(date.getTime())) return dateStr;

      return date.toISOString().split('T')[0]; // YYYY-MM-DD
    } catch {
      return dateStr;
    }
  }

  /**
   * üè¢ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤
   */
  private normalizeSource(source: string | undefined): string {
    if (!source) return 'OTHER';

    const normalized = source.toLowerCase();

    if (normalized.includes('kkday')) return 'KKDAY';
    if (normalized.includes('sayama')) return 'SAYAMA';
    if (normalized.includes('asia')) return 'ASIA_THAILAND';
    if (normalized.includes('direct')) return 'DIRECT';

    return 'OTHER';
  }

  /**
   * üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR
   */
  async generateOcrReport(
    ocrData: TicketOrderOCR,
    validation: any,
    confidence: any,
  ): Promise<{
    summary: string;
    details: Record<string, any>;
    recommendations: string[];
  }> {
    const summary = validation.isValid
      ? `‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: ${Math.round(confidence.overallConfidence * 100)}%)`
      : `‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ${validation.errors.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;

    const details = {
      extractedData: ocrData,
      validation,
      confidence,
      processedAt: new Date().toISOString(),
    };

    const recommendations = [
      ...validation.errors.map((error: string) => `‚ùå ${error}`),
      ...validation.warnings.map((warning: string) => `‚ö†Ô∏è ${warning}`),
      ...confidence.suggestions.map((suggestion: string) => `üí° ${suggestion}`),
    ];

    return {
      summary,
      details,
      recommendations,
    };
  }
}
