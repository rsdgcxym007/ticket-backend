import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, LessThan, MoreThanOrEqual } from 'typeorm';
import {
  Notification,
  NotificationType,
  NotificationStatus,
  NotificationChannel,
} from './notification.entity';
import { User } from '../user/user.entity';
import { ThailandTimeHelper } from '../common/utils/thailand-time.helper';

@Injectable()
export class NotificationService {
  private readonly logger = new Logger(NotificationService.name);

  constructor(
    @InjectRepository(Notification)
    private notificationRepo: Repository<Notification>,
    @InjectRepository(User)
    private userRepo: Repository<User>,
  ) {}

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
   */
  async createNotification(data: {
    title: string;
    message: string;
    type: NotificationType;
    channel: NotificationChannel;
    userId?: string;
    metadata?: Record<string, any>;
  }): Promise<Notification> {
    this.logger.log(`üì¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${data.title}`);

    const notification = this.notificationRepo.create({
      title: data.title,
      message: data.message,
      type: data.type,
      channel: data.channel,
      userId: data.userId,
      metadata: data.metadata,
      status: NotificationStatus.PENDING,
    });

    return await this.notificationRepo.save(notification);
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
   */
  async sendOrderConfirmationNotification(orderId: string, userId: string) {
    await this.createNotification({
      title: 'üé´ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
      message: `‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #${orderId} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î`,
      type: NotificationType.ORDER_CONFIRMED,
      channel: NotificationChannel.IN_APP,
      userId,
      metadata: { orderId },
    });

    // ‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô Push Notification ‡∏î‡πâ‡∏ß‡∏¢
    await this.createNotification({
      title: '‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
      message: `‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #${orderId} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô`,
      type: NotificationType.ORDER_CONFIRMED,
      channel: NotificationChannel.PUSH,
      userId,
      metadata: { orderId },
    });
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
   */
  async sendPaymentSuccessNotification(
    orderId: string,
    userId: string,
    amount: number,
  ) {
    await this.createNotification({
      title: 'üí∞ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      message: `‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #${orderId} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`,
      type: NotificationType.PAYMENT_SUCCESS,
      channel: NotificationChannel.IN_APP,
      userId,
      metadata: { orderId, amount },
    });

    await this.createNotification({
      title: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      message: `‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #${orderId} ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß ${amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
      type: NotificationType.PAYMENT_SUCCESS,
      channel: NotificationChannel.PUSH,
      userId,
      metadata: { orderId, amount },
    });
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
   */
  async sendOrderExpiringNotification(
    orderId: string,
    userId: string,
    expiresAt: Date,
  ) {
    const timeLeft = Math.floor(
      (expiresAt.getTime() - Date.now()) / (1000 * 60),
    ); // ‡∏ô‡∏≤‡∏ó‡∏µ

    await this.createNotification({
      title: '‚è∞ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
      message: `‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #${orderId} ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${timeLeft} ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô`,
      type: NotificationType.ORDER_EXPIRING,
      channel: NotificationChannel.IN_APP,
      userId,
      metadata: { orderId, expiresAt, timeLeft },
    });

    await this.createNotification({
      title: '‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
      message: `${timeLeft} ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏≥‡∏£‡∏∞`,
      type: NotificationType.ORDER_EXPIRING,
      channel: NotificationChannel.PUSH,
      userId,
      metadata: { orderId, expiresAt, timeLeft },
    });
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
   */
  async sendPaymentFailedNotification(
    orderId: string,
    userId: string,
    reason?: string,
  ) {
    await this.createNotification({
      title: '‚ùå ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      message: `‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #${orderId} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${reason ? `‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}` : ''} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`,
      type: NotificationType.PAYMENT_FAILED,
      channel: NotificationChannel.IN_APP,
      userId,
      metadata: { orderId, reason },
    });
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  async sendPromotionalNotification(
    title: string,
    message: string,
    metadata?: Record<string, any>,
  ) {
    this.logger.log(`üì£ ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô: ${title}`);

    // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const users = await this.userRepo.find({ select: ['id'] });

    const notifications = users.map((user) =>
      this.notificationRepo.create({
        title,
        message,
        type: NotificationType.PROMOTIONAL,
        channel: NotificationChannel.IN_APP,
        userId: user.id,
        metadata,
        status: NotificationStatus.PENDING,
      }),
    );

    await this.notificationRepo.save(notifications);
    this.logger.log(`üì£ ‡∏™‡πà‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡πâ ${users.length} ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ`);
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   */
  async getUserNotifications(userId: string, limit: number = 50) {
    return await this.notificationRepo.find({
      where: { userId },
      order: { createdAt: 'DESC' },
      take: limit,
    });
  }

  /**
   * ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
   */
  async markAsRead(notificationId: string, userId: string) {
    const notification = await this.notificationRepo.findOne({
      where: { id: notificationId, userId },
    });

    if (notification) {
      notification.status = NotificationStatus.READ;
      notification.readAt = ThailandTimeHelper.now();
      await this.notificationRepo.save(notification);
    }

    return notification;
  }

  /**
   * ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
   */
  async markAllAsRead(userId: string) {
    await this.notificationRepo.update(
      {
        userId,
        status: NotificationStatus.SENT,
      },
      {
        status: NotificationStatus.READ,
        readAt: ThailandTimeHelper.now(),
      },
    );
  }

  /**
   * ‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
   */
  async getUnreadCount(userId: string): Promise<number> {
    return await this.notificationRepo.count({
      where: {
        userId,
        status: NotificationStatus.SENT,
      },
    });
  }

  /**
   * ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏ß‡∏±‡∏ô)
   */
  async cleanupOldNotifications() {
    const thirtyDaysAgo = ThailandTimeHelper.subtract(
      ThailandTimeHelper.now(),
      30,
      'day',
    );

    const result = await this.notificationRepo.delete({
      createdAt: LessThan(thirtyDaysAgo),
    });

    this.logger.log(`üßπ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πà‡∏≤ ${result.affected} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  }

  /**
   * ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   */
  async getNotificationStats() {
    const today = ThailandTimeHelper.startOfDay();
    const thisWeek = ThailandTimeHelper.startOfWeek();
    const thisMonth = ThailandTimeHelper.startOfMonth();

    const [todayCount, weekCount, monthCount, totalCount, unreadCount, byType] =
      await Promise.all([
        this.notificationRepo.count({
          where: { createdAt: MoreThanOrEqual(today) },
        }),
        this.notificationRepo.count({
          where: { createdAt: MoreThanOrEqual(thisWeek) },
        }),
        this.notificationRepo.count({
          where: { createdAt: MoreThanOrEqual(thisMonth) },
        }),
        this.notificationRepo.count(),
        this.notificationRepo.count({
          where: { status: NotificationStatus.SENT },
        }),
        this.getNotificationsByType(),
      ]);

    return {
      today: todayCount,
      thisWeek: weekCount,
      thisMonth: monthCount,
      total: totalCount,
      unread: unreadCount,
      byType,
      lastUpdated: ThailandTimeHelper.formatDateTime(ThailandTimeHelper.now()),
    };
  }

  private async getNotificationsByType() {
    const results = await this.notificationRepo
      .createQueryBuilder('notification')
      .select('notification.type', 'type')
      .addSelect('COUNT(*)', 'count')
      .groupBy('notification.type')
      .getRawMany();

    return results.reduce((acc, item) => {
      acc[item.type] = parseInt(item.count);
      return acc;
    }, {});
  }
}
