import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  UseGuards,
  Request,
  Logger,
  BadRequestException,
} from '@nestjs/common';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { UserRole } from '../common/enums';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { CreateStaffDto } from './dto/create-staff.dto';
import { UpdateStaffDto } from './dto/update-staff.dto';
import { StaffService } from './staff.service';
import { Staff, StaffStatus, StaffRole, StaffPermission } from './staff.entity';

@ApiTags('üë• Staff Management - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô')
@Controller('staff')
@UseGuards(JwtAuthGuard, RolesGuard)
@ApiBearerAuth()
export class StaffController {
  private readonly logger = new Logger(StaffController.name);

  constructor(private staffService: StaffService) {}

  /**
   * üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
   */
  @Post()
  @Roles(UserRole.ADMIN)
  @ApiOperation({
    summary: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà',
    description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå',
  })
  @ApiResponse({ status: 201, description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
  async create(
    @Body() createStaffDto: CreateStaffDto,
    @Request() req,
  ): Promise<any> {
    try {
      const savedStaff = await this.staffService.create(
        createStaffDto,
        req.user.id,
      );

      return {
        success: true,
        message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
        data: savedStaff,
        note: `‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: Staff${savedStaff.staffCode}!`,
      };
    } catch (error) {
      this.logger.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:', error);
      throw error;
    }
  }

  /**
   * üìã ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  @Get()
  @Roles(UserRole.ADMIN, UserRole.STAFF)
  @ApiOperation({
    summary: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
    description: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á',
  })
  @ApiResponse({ status: 200, description: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async findAll(@Query() query: any) {
    try {
      const {
        page = 1,
        limit = 10,
        search,
        status,
        role,
        department,
        sortBy = 'createdAt',
        order = 'DESC',
      } = query;

      const queryBuilder = this.staffService.createQueryBuilder('staff');

      if (search) {
        queryBuilder.andWhere(
          '(staff.firstName ILIKE :search OR staff.lastName ILIKE :search OR staff.email ILIKE :search OR staff.staffCode ILIKE :search)',
          { search: `%${search}%` },
        );
      }

      if (status) {
        queryBuilder.andWhere('staff.status = :status', { status });
      }

      if (role) {
        queryBuilder.andWhere('staff.role = :role', { role });
      }

      if (department) {
        queryBuilder.andWhere('staff.department = :department', { department });
      }

      queryBuilder
        .orderBy(`staff.${sortBy}`, order.toUpperCase() as 'ASC' | 'DESC')
        .skip((page - 1) * limit)
        .take(limit);

      const [items, total] = await queryBuilder.getManyAndCount();

      this.logger.log(`üìã ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${items.length}/${total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

      return {
        success: true,
        message: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: {
          items,
          pagination: {
            page: Number(page),
            limit: Number(limit),
            total,
            totalPages: Math.ceil(total / limit),
          },
        },
      };
    } catch (error) {
      this.logger.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:', error);
      throw error;
    }
  }

  /**
   * üìä ‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
   */
  @Get('analytics/summary')
  @Roles(UserRole.ADMIN)
  @ApiOperation({
    summary: '‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
    description: '‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
  })
  @ApiResponse({ status: 200, description: '‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async getAnalyticsSummary() {
    try {
      const summary = await this.getStaffSummary();

      this.logger.log('üìä ‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      return {
        success: true,
        message: '‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: summary,
      };
    } catch (error) {
      this.logger.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:', error);
      throw error;
    }
  }

  /**
   * üîë ‡∏î‡∏π‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  @Get('list-permissions')
  @Roles(UserRole.ADMIN, UserRole.STAFF)
  @ApiOperation({
    summary: '‡∏î‡∏π‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    description: '‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ permissions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ permissions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
  })
  async getAllPermissions() {
    this.logger.log('üìã Getting all available permissions');

    const permissions = Object.values(StaffPermission);
    const permissionGroups = {
      analytics: permissions.filter(
        (p) => p.includes('analytics') || p.includes('reports'),
      ),
      staff: permissions.filter((p) => p.includes('staff')),
      orders: permissions.filter((p) => p.includes('orders')),
      system: permissions.filter(
        (p) =>
          p.includes('system') || p.includes('settings') || p.includes('audit'),
      ),
      performance: permissions.filter(
        (p) => p.includes('performance') || p.includes('monitoring'),
      ),
    };

    return {
      success: true,
      message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• permissions ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        all: permissions,
        groups: permissionGroups,
        total: permissions.length,
      },
    };
  }

  /**
   * üéØ ‡∏î‡∏π‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö staff ‡∏ó‡∏µ‡πà login ‡πÅ‡∏•‡πâ‡∏ß)
   */
  @Get('my/permissions')
  @Roles(UserRole.STAFF, UserRole.ADMIN, UserRole.MANAGER)
  @ApiOperation({
    summary: '‡∏î‡∏π‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á',
    description: 'staff ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á',
  })
  async getMyPermissions(@Request() req) {
    this.logger.log(`üìã Getting my permissions for user: ${req.user?.email}`);

    if (!req.user?.email) {
      throw new BadRequestException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    }

    const staff = await this.staffService.findOne({
      where: { email: req.user.email },
      select: [
        'id',
        'staffCode',
        'firstName',
        'lastName',
        'email',
        'role',
        'status',
        'permissions',
        'department',
        'position',
      ],
    });

    if (!staff) {
      throw new BadRequestException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• staff ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ');
    }

    return {
      success: true,
      message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        staff: {
          id: staff.id,
          staffCode: staff.staffCode,
          name: `${staff.firstName} ${staff.lastName}`,
          email: staff.email,
          role: staff.role,
          department: staff.department,
          position: staff.position,
        },
        permissions: {
          current: staff.permissions || [],
          total: staff.permissions?.length || 0,
          hasSystemAccess: staff.permissions?.some((p) => p.includes('system')),
          hasAnalyticsAccess: staff.permissions?.some((p) =>
            p.includes('analytics'),
          ),
          hasStaffAccess: staff.permissions?.some((p) => p.includes('staff')),
        },
      },
    };
  }

  /**
   * üè¢ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å
   */
  @Get('meta/departments')
  @Roles(UserRole.ADMIN, UserRole.STAFF)
  @ApiOperation({
    summary: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å',
    description: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£',
  })
  @ApiResponse({ status: 200, description: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async getDepartments() {
    try {
      const departments = await this.staffService
        .createQueryBuilder('staff')
        .select('DISTINCT staff.department', 'department')
        .where('staff.department IS NOT NULL')
        .getRawMany();

      const departmentList = departments.map((d) => d.department);

      this.logger.log(`üè¢ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å: ${departmentList.length} ‡πÅ‡∏ú‡∏ô‡∏Å`);

      return {
        success: true,
        message: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: {
          departments: departmentList,
          total: departmentList.length,
        },
      };
    } catch (error) {
      this.logger.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å:', error);
      throw error;
    }
  }

  /**
   * üë§ ‡∏î‡∏π‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á staff ‡∏Ñ‡∏ô‡πÉ‡∏î‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á
   */
  @Get(':id/permissions')
  @Roles(UserRole.ADMIN, UserRole.MANAGER)
  @ApiOperation({
    summary: '‡∏î‡∏π‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á staff',
    description: '‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡∏≠‡∏á staff ‡∏Ñ‡∏ô‡πÉ‡∏î‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á staff',
  })
  async getStaffPermissions(@Param('id') id: string) {
    this.logger.log(`üìã Getting permissions for staff: ${id}`);

    const staff = await this.staffService.findOne({
      where: { id },
      select: [
        'id',
        'staffCode',
        'firstName',
        'lastName',
        'email',
        'role',
        'permissions',
        'status',
        'department',
        'position',
      ],
    });

    if (!staff) {
      throw new BadRequestException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• staff');
    }

    return {
      success: true,
      message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á staff ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        staff: {
          id: staff.id,
          staffCode: staff.staffCode,
          name: `${staff.firstName} ${staff.lastName}`,
          email: staff.email,
          role: staff.role,
          department: staff.department,
          position: staff.position,
        },
        permissions: {
          current: staff.permissions || [],
          total: staff.permissions?.length || 0,
          hasSystemAccess: staff.permissions?.some((p) => p.includes('system')),
          hasAnalyticsAccess: staff.permissions?.some((p) =>
            p.includes('analytics'),
          ),
          hasStaffAccess: staff.permissions?.some((p) => p.includes('staff')),
        },
      },
    };
  }

  /**
   * üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID
   */
  @Get(':id')
  @Roles(UserRole.ADMIN, UserRole.STAFF)
  @ApiOperation({
    summary: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
    description: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏≤‡∏° ID',
  })
  @ApiResponse({ status: 200, description: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' })
  async findOne(@Param('id') id: string) {
    try {
      const staff = await this.staffService.findOne({
        where: { id },
        select: [
          'id',
          'staffCode',
          'firstName',
          'lastName',
          'email',
          'phone',
          'role',
          'status',
          'permissions',
          'department',
          'position',
          'salary',
          'hireDate',
          'avatar',
          'notes',
          'createdAt',
          'updatedAt',
        ],
      });

      if (!staff) {
        throw new BadRequestException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
      }

      this.logger.log(`üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${staff.staffCode}`);

      return {
        success: true,
        message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: staff,
      };
    } catch (error) {
      this.logger.error(
        `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ID: ${id}:`,
        error,
      );
      throw error;
    }
  }

  /**
   * ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
   */
  @Patch(':id')
  @Roles(UserRole.ADMIN)
  @ApiOperation({
    summary: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
    description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID',
  })
  @ApiResponse({ status: 200, description: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' })
  async update(
    @Param('id') id: string,
    @Body() updateStaffDto: UpdateStaffDto,
    @Request() req,
  ) {
    try {
      const staff = await this.staffService.findOne({ where: { id } });

      if (!staff) {
        throw new BadRequestException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
      }

      const updatedData = {
        ...updateStaffDto,
        updatedBy: req.user.id,
      };

      const result = await this.staffService.save({
        ...staff,
        ...updatedData,
      } as Staff);

      this.logger.log(`‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${staff.staffCode}`);

      return {
        success: true,
        message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: result,
      };
    } catch (error) {
      this.logger.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ID: ${id}:`, error);
      throw error;
    }
  }

  /**
   * üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
   */
  @Patch(':id/status')
  @Roles(UserRole.ADMIN)
  @ApiOperation({
    summary: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
    description: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)',
  })
  @ApiResponse({ status: 200, description: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async updateStatus(
    @Param('id') id: string,
    @Body('status') status: StaffStatus,
    @Request() req,
  ) {
    if (!Object.values(StaffStatus).includes(status)) {
      throw new BadRequestException('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    try {
      const staff = await this.staffService.findOne({ where: { id } });

      if (!staff) {
        throw new BadRequestException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
      }

      const result = await this.staffService.save({
        ...staff,
        status,
        updatedBy: req.user.id,
      });

      this.logger.log(
        `‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${staff.staffCode} -> ${status}`,
      );

      return {
        success: true,
        message: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: result,
      };
    } catch (error) {
      this.logger.error(
        `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ID: ${id}:`,
        error,
      );
      throw error;
    }
  }

  /**
   * üóëÔ∏è ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (Soft Delete)
   */
  @Delete(':id')
  @Roles(UserRole.ADMIN)
  @ApiOperation({
    summary: '‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
    description: '‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (soft delete)',
  })
  @ApiResponse({ status: 200, description: '‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' })
  async remove(@Param('id') id: string, @Request() req) {
    try {
      const staff = await this.staffService.findOne({ where: { id } });

      if (!staff) {
        throw new BadRequestException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
      }

      // Soft delete by setting status to TERMINATED
      await this.staffService.save({
        ...staff,
        status: StaffStatus.TERMINATED,
        updatedBy: req.user.id,
      });

      this.logger.log(`üóëÔ∏è ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${staff.staffCode}`);

      return {
        success: true,
        message: '‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: { id: staff.id, staffCode: staff.staffCode },
      };
    } catch (error) {
      this.logger.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ID: ${id}:`, error);
      throw error;
    }
  }

  /**
   * üîë ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
   */
  @Patch(':id/reset-password')
  @Roles(UserRole.ADMIN)
  @ApiOperation({
    summary: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
    description: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
  })
  @ApiResponse({ status: 200, description: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async resetPassword(@Param('id') id: string): Promise<any> {
    try {
      const result = await this.staffService.resetPassword(id);

      return {
        success: true,
        message: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: {
          newPassword: result.password,
          note: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
        },
      };
    } catch (error) {
      this.logger.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:', error);
      throw error;
    }
  }

  /**
   * üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Staff ‡∏Å‡∏±‡∏ö User
   */
  @Patch(':id/link-user')
  @Roles(UserRole.ADMIN)
  @ApiOperation({
    summary: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Staff ‡∏Å‡∏±‡∏ö User',
    description: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Staff ‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ User ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß',
  })
  @ApiResponse({ status: 200, description: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async linkToUser(
    @Param('id') id: string,
    @Body('userId') userId: string,
    @Request() req,
  ): Promise<any> {
    try {
      const result = await this.staffService.linkStaffToUser(
        id,
        userId,
        req.user.id,
      );

      return {
        success: true,
        message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Staff ‡∏Å‡∏±‡∏ö User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: result,
      };
    } catch (error) {
      this.logger.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:', error);
      throw error;
    }
  }

  // Private methods
  private async generateStaffCode(): Promise<string> {
    const now = new Date();
    const year = now.getFullYear().toString().slice(-2);
    const month = (now.getMonth() + 1).toString().padStart(2, '0');

    const count = await this.staffService.count();
    const sequence = (count + 1).toString().padStart(4, '0');

    return `STF${year}${month}${sequence}`;
  }

  private getDefaultPermissions(role: StaffRole): StaffPermission[] {
    const permissionMap = {
      [StaffRole.ADMIN]: Object.values(StaffPermission),
      [StaffRole.MANAGER]: [
        StaffPermission.VIEW_ANALYTICS,
        StaffPermission.EXPORT_REPORTS,
        StaffPermission.VIEW_STAFF,
        StaffPermission.MANAGE_ORDERS,
        StaffPermission.CANCEL_ORDERS,
        StaffPermission.VIEW_PERFORMANCE,
      ],
      [StaffRole.SUPERVISOR]: [
        StaffPermission.VIEW_ANALYTICS,
        StaffPermission.VIEW_STAFF,
        StaffPermission.MANAGE_ORDERS,
        StaffPermission.VIEW_PERFORMANCE,
      ],
      [StaffRole.STAFF]: [
        StaffPermission.VIEW_STAFF,
        StaffPermission.MANAGE_ORDERS,
      ],
    };

    return permissionMap[role] || [];
  }

  private async getStaffSummary() {
    const [
      total,
      active,
      inactive,
      suspended,
      terminated,
      byRole,
      byDepartment,
    ] = await Promise.all([
      this.staffService.count(),
      this.staffService.count({ where: { status: StaffStatus.ACTIVE } }),
      this.staffService.count({ where: { status: StaffStatus.INACTIVE } }),
      this.staffService.count({ where: { status: StaffStatus.SUSPENDED } }),
      this.staffService.count({ where: { status: StaffStatus.TERMINATED } }),
      this.getStaffByRole(),
      this.getStaffByDepartment(),
    ]);

    return {
      counts: {
        total,
        active,
        inactive,
        suspended,
        terminated,
      },
      distribution: {
        byRole,
        byDepartment,
      },
      growth: {
        thisMonth: await this.getStaffCountByMonth(new Date()),
        lastMonth: await this.getStaffCountByMonth(
          new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
        ),
      },
    };
  }

  private async getStaffByRole() {
    const result = await this.staffService
      .createQueryBuilder('staff')
      .select('staff.role', 'role')
      .addSelect('COUNT(*)', 'count')
      .where('staff.status != :status', { status: StaffStatus.TERMINATED })
      .groupBy('staff.role')
      .getRawMany();

    return result.reduce(
      (acc, item) => {
        acc[item.role] = parseInt(item.count);
        return acc;
      },
      {} as Record<string, number>,
    );
  }

  private async getStaffByDepartment() {
    const result = await this.staffService
      .createQueryBuilder('staff')
      .select('staff.department', 'department')
      .addSelect('COUNT(*)', 'count')
      .where('staff.status != :status', { status: StaffStatus.TERMINATED })
      .andWhere('staff.department IS NOT NULL')
      .groupBy('staff.department')
      .getRawMany();

    return result.reduce(
      (acc, item) => {
        acc[item.department] = parseInt(item.count);
        return acc;
      },
      {} as Record<string, number>,
    );
  }

  private async getStaffCountByMonth(date: Date): Promise<number> {
    const startOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
    const endOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);

    return this.staffService
      .createQueryBuilder('staff')
      .where('staff.createdAt >= :start', { start: startOfMonth })
      .andWhere('staff.createdAt <= :end', { end: endOfMonth })
      .getCount();
  }
}
