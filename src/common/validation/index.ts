// ========================================
// üõ°Ô∏è CENTRAL VALIDATION SYSTEM
// ========================================

import {
  ValidatorConstraint,
  ValidatorConstraintInterface,
  registerDecorator,
  ValidationOptions,
  ValidationError,
} from 'class-validator';
import { BadRequestException } from '@nestjs/common';
import { ThailandTimeHelper } from '../utils/thailand-time.helper';

// ========================================
// üîß CUSTOM VALIDATORS
// ========================================

@ValidatorConstraint({ name: 'isDateInFuture', async: false })
export class IsDateInFutureConstraint implements ValidatorConstraintInterface {
  validate(value: any) {
    if (!value) return true; // Allow empty values
    const date = ThailandTimeHelper.toThailandTime(value);
    const now = ThailandTimeHelper.now();
    return date > now;
  }

  defaultMessage() {
    return 'Date must be in the future';
  }
}

@ValidatorConstraint({ name: 'isPhoneNumber', async: false })
export class IsPhoneNumberConstraint implements ValidatorConstraintInterface {
  validate(value: any) {
    if (!value) return true; // Allow empty values
    const phoneRegex = /^[0-9]{10}$/;
    return phoneRegex.test(value);
  }

  defaultMessage() {
    return 'Phone number must be 10 digits';
  }
}

@ValidatorConstraint({ name: 'isReferenceNo', async: false })
export class IsReferenceNoConstraint implements ValidatorConstraintInterface {
  validate(value: any) {
    if (!value) return true; // Allow empty values
    const refRegex = /^[A-Z0-9]{8,12}$/;
    return refRegex.test(value);
  }

  defaultMessage() {
    return 'Reference number must be 8-12 alphanumeric characters';
  }
}

// ========================================
// üéØ DECORATOR FUNCTIONS
// ========================================

export function IsDateInFuture(validationOptions?: ValidationOptions) {
  return function (object: object, propertyName: string) {
    registerDecorator({
      target: object.constructor,
      propertyName: propertyName,
      options: validationOptions,
      constraints: [],
      validator: IsDateInFutureConstraint,
    });
  };
}

export function IsPhoneNumber(validationOptions?: ValidationOptions) {
  return function (object: object, propertyName: string) {
    registerDecorator({
      target: object.constructor,
      propertyName: propertyName,
      options: validationOptions,
      constraints: [],
      validator: IsPhoneNumberConstraint,
    });
  };
}

export function IsReferenceNo(validationOptions?: ValidationOptions) {
  return function (object: object, propertyName: string) {
    registerDecorator({
      target: object.constructor,
      propertyName: propertyName,
      options: validationOptions,
      constraints: [],
      validator: IsReferenceNoConstraint,
    });
  };
}

// ========================================
// üîç VALIDATION HELPER FUNCTIONS
// ========================================

export class ValidationHelper {
  /**
   * ‡πÅ‡∏õ‡∏•‡∏á ValidationError ‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
   */
  static formatErrors(errors: ValidationError[]): string[] {
    const messages: string[] = [];

    errors.forEach((error) => {
      if (error.constraints) {
        Object.values(error.constraints).forEach((constraint) => {
          messages.push(constraint);
        });
      }

      if (error.children && error.children.length > 0) {
        messages.push(...this.formatErrors(error.children));
      }
    });

    return messages;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á BadRequestException ‡∏à‡∏≤‡∏Å ValidationError
   */
  static createValidationException(
    errors: ValidationError[],
  ): BadRequestException {
    const messages = this.formatErrors(errors);
    return new BadRequestException({
      message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      errors: messages,
    });
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isValidPhone(phone: string): boolean {
    const phoneRegex = /^[0-9]{10}$/;
    return phoneRegex.test(phone);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isValidReferenceNo(refNo: string): boolean {
    const refRegex = /^[A-Z0-9]{8,12}$/;
    return refRegex.test(refNo);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isDateInFuture(date: string | Date): boolean {
    const targetDate = ThailandTimeHelper.toThailandTime(date);
    const now = ThailandTimeHelper.now();
    return targetDate > now;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô UUID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isValidUUID(uuid: string): boolean {
    const uuidRegex =
      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    return uuidRegex.test(uuid);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
   */
  static isValidAmount(amount: number): boolean {
    return amount >= 0 && amount <= 1000000; // Max 1 million
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡πã‡∏ß
   */
  static isValidQuantity(quantity: number): boolean {
    return quantity >= 1 && quantity <= 50; // Max 50 tickets per order
  }

  /**
   * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  static sanitizeInput(input: string): string {
    return input.trim().replace(/[<>]/g, '');
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
   */
  static isValidPassword(password: string): boolean {
    // ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß, ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d@$!%*#?&]{8,}$/;
    return passwordRegex.test(password);
  }
}

// ========================================
// üéØ BUSINESS VALIDATION RULES
// ========================================

export class BusinessValidation {
  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß
   */
  static validateBookingPermission(
    userRole: string,
    requestedQuantity: number,
    existingOrders: number,
  ): { isValid: boolean; message?: string } {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const limits = {
      USER: { maxPerOrder: 10, maxTotal: 50 },
      STAFF: { maxPerOrder: 99999, maxTotal: 99999 },
      ADMIN: { maxPerOrder: 99999, maxTotal: 99999 },
    };

    const userLimits = limits[userRole as keyof typeof limits];
    if (!userLimits) {
      return { isValid: false, message: '‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' };
    }

    if (requestedQuantity > userLimits.maxPerOrder) {
      return {
        isValid: false,
        message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Å‡∏¥‡∏ô ${userLimits.maxPerOrder} ‡πÉ‡∏ö‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ`,
      };
    }

    if (existingOrders + requestedQuantity > userLimits.maxTotal) {
      return {
        isValid: false,
        message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏£‡∏ß‡∏°‡πÄ‡∏Å‡∏¥‡∏ô ${userLimits.maxTotal} ‡πÉ‡∏ö‡πÑ‡∏î‡πâ`,
      };
    }

    return { isValid: true };
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
   */
  static validatePayment(
    amount: number,
    method: string,
    transactionId?: string,
  ): { isValid: boolean; message?: string } {
    if (amount <= 0) {
      return { isValid: false, message: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏ö‡∏≤‡∏ó' };
    }

    if (amount > 1000000) {
      return { isValid: false, message: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1,000,000 ‡∏ö‡∏≤‡∏ó' };
    }

    const validMethods = ['BANK_TRANSFER', 'CREDIT_CARD', 'CASH'];
    if (!validMethods.includes(method)) {
      return { isValid: false, message: '‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' };
    }

    if (method !== 'CASH' && !transactionId) {
      return {
        isValid: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
      };
    }

    return { isValid: true };
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
   */
  static validateBookingTime(
    showDate: Date,
    bookingDate: Date = ThailandTimeHelper.now(),
  ): { isValid: boolean; message?: string } {
    const timeDiff = showDate.getTime() - bookingDate.getTime();
    const hoursDiff = timeDiff / (1000 * 60 * 60);

    // if (hoursDiff < 2) {
    //   return {
    //     isValid: false,
    //     message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ',
    //   };
    // }

    if (hoursDiff > 24 * 30) {
      return {
        isValid: false,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ',
      };
    }

    return { isValid: true };
  }
}
