import { Injectable, Logger } from '@nestjs/common';
import * as QRCode from 'qrcode';
import * as crypto from 'crypto-js';
import { ConfigService } from '@nestjs/config';

export interface QRCodeData {
  orderId: string;
  userId: string;
  showDate: string;
  seats?: string[];
  amount: number;
  ticketType: 'seated' | 'standing';
  validUntil: string;
  securityHash: string;
}

export interface QRCodeOptions {
  width?: number;
  margin?: number;
  color?: {
    dark?: string;
    light?: string;
  };
  errorCorrectionLevel?: 'L' | 'M' | 'Q' | 'H';
  quality?: number;
}

export interface QRValidationResult {
  isValid: boolean;
  data?: QRCodeData;
  error?: string;
  timestamp: string;
}

@Injectable()
export class QRCodeService {
  private readonly logger = new Logger(QRCodeService.name);
  private readonly secretKey: string;

  constructor(private configService: ConfigService) {
    this.secretKey =
      this.configService.get<string>('QR_SECRET_KEY') ||
      'default-qr-secret-key';
  }

  /**
   * üé´ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πã‡∏ß (URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
   */
  async generateTicketQR(
    orderId: string,
    userId: string,
    showDate: string,
    seats: string[] | null,
    amount: number,
    ticketType: 'seated' | 'standing',
    options: QRCodeOptions = {},
  ): Promise<{ qrCodeImage: string; qrData: QRCodeData; qrUrl: string }> {
    try {
      // Validate ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á showDate
      let showDateTime: Date;
      let validUntil: string;

      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ showDate ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!showDate || typeof showDate !== 'string') {
          this.logger.warn(
            `‚ö†Ô∏è Invalid showDate format: ${showDate}, using current date`,
          );
          showDateTime = new Date();
        } else {
          showDateTime = new Date(showDate);

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô valid date ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (isNaN(showDateTime.getTime())) {
            this.logger.warn(
              `‚ö†Ô∏è Invalid showDate value: ${showDate}, using current date`,
            );
            showDateTime = new Date();
          }
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (7 ‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô)
        validUntil = new Date(
          showDateTime.getTime() + 7 * 24 * 60 * 60 * 1000,
        ).toISOString();
      } catch (dateError) {
        this.logger.error(
          `‚ùå Date parsing error: ${dateError.message}, using current date`,
        );
        showDateTime = new Date();
        validUntil = new Date(
          showDateTime.getTime() + 7 * 24 * 60 * 60 * 1000,
        ).toISOString();
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR
      const qrData: QRCodeData = {
        orderId,
        userId,
        showDate: showDateTime.toISOString(), // ‡πÉ‡∏ä‡πâ ISO string ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
        seats: seats || [],
        amount,
        ticketType,
        validUntil,
        securityHash: '', // ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
      };

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á security hash
      qrData.securityHash = this.generateSecurityHash(qrData);

      // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const encryptedData = this.encryptData(JSON.stringify(qrData));

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏õ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      const baseUrl =
        this.configService.get<string>('NUXT_PUBLIC_APP_URL') ||
        this.configService.get<string>('APP_BASE_URL') ||
        'http://localhost:3000';
      const qrUrl = `${baseUrl}/api/v1/mobile/scanner/check-in/${orderId}?qr=${encodeURIComponent(encryptedData)}`;

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default options
      const qrOptions: QRCode.QRCodeToDataURLOptions = {
        width: options.width || 256,
        margin: options.margin || 2,
        color: {
          dark: options.color?.dark || '#000000',
          light: options.color?.light || '#FFFFFF',
        },
        errorCorrectionLevel: options.errorCorrectionLevel || 'M',
      };

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code image ‡∏à‡∏≤‡∏Å URL (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™)
      const qrCodeImage = await QRCode.toDataURL(qrUrl, qrOptions);

      this.logger.log(
        `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code URL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${orderId}: ${qrUrl}`,
      );

      return {
        qrCodeImage,
        qrData,
        qrUrl,
      };
    } catch (error) {
      this.logger.error(
        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code: ${error.message}`,
      );
      throw new Error(`‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
    }
  }

  /**
   * üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö QR Code
   */
  async validateQRCode(encryptedQRData: string): Promise<QRValidationResult> {
    try {
      // ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const decryptedData = this.decryptData(encryptedQRData);
      const qrData: QRCodeData = JSON.parse(decryptedData);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö security hash
      const expectedHash = this.generateSecurityHash(qrData);
      if (qrData.securityHash !== expectedHash) {
        return {
          isValid: false,
          error: 'QR Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡πÅ‡∏õ‡∏•‡∏á',
          timestamp: new Date().toISOString(),
        };
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      const now = new Date();
      const validUntil = new Date(qrData.validUntil);
      if (now > validUntil) {
        return {
          isValid: false,
          error: 'QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß',
          timestamp: new Date().toISOString(),
        };
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
      const showDate = new Date(qrData.showDate);
      const showEndTime = new Date(showDate.getTime() + 24 * 60 * 60 * 1000); // +1 ‡∏ß‡∏±‡∏ô
      if (now < showDate || now > showEndTime) {
        return {
          isValid: false,
          error: 'QR Code ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
          timestamp: new Date().toISOString(),
        };
      }

      this.logger.log(`‚úÖ QR Code ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${qrData.orderId}`);

      return {
        isValid: true,
        data: qrData,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(
        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö QR Code: ${error.message}`,
      );
      return {
        isValid: false,
        error: 'QR Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢',
        timestamp: new Date().toISOString(),
      };
    }
  }

  /**
   * üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ
   */
  async generateQRWithLogo(
    data: string,
    logoPath?: string,
    options: QRCodeOptions = {},
  ): Promise<string> {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ
      const qrOptions: QRCode.QRCodeToDataURLOptions = {
        width: options.width || 512,
        margin: options.margin || 4,
        errorCorrectionLevel: 'H', // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ
        color: options.color,
      };

      const qrCodeImage = await QRCode.toDataURL(data, qrOptions);

      // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏•‡πÇ‡∏Å‡πâ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ QR Code ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
      if (!logoPath) {
        return qrCodeImage;
      }

      // TODO: ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ú‡∏™‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÑ‡∏î‡πâ
      this.logger.log('üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ implement');

      return qrCodeImage;
    } catch (error) {
      this.logger.error(
        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ: ${error.message}`,
      );
      throw new Error(`‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
    }
  }

  /**
   * üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
   */
  async generateMultipleFormats(
    data: string,
    formats: Array<'png' | 'svg'> = ['png'],
  ): Promise<Record<string, string>> {
    const results: Record<string, string> = {};

    for (const format of formats) {
      try {
        if (format === 'svg') {
          results[format] = await QRCode.toString(data, { type: 'svg' });
        } else {
          results[format] = await QRCode.toDataURL(data, {
            width: 512,
            margin: 2,
            errorCorrectionLevel: 'M',
          });
        }
      } catch (error) {
        this.logger.error(
          `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ${format}: ${error.message}`,
        );
      }
    }

    return results;
  }

  /**
   * üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  private encryptData(data: string): string {
    return crypto.AES.encrypt(data, this.secretKey).toString();
  }

  /**
   * üîì ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  private decryptData(encryptedData: string): string {
    const bytes = crypto.AES.decrypt(encryptedData, this.secretKey);
    return bytes.toString(crypto.enc.Utf8);
  }

  /**
   * üõ°Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á security hash
   */
  private generateSecurityHash(
    qrData: Omit<QRCodeData, 'securityHash'>,
  ): string {
    const dataString = `${qrData.orderId}${qrData.userId}${qrData.showDate}${qrData.amount}${qrData.ticketType}`;
    return crypto.HmacSHA256(dataString, this.secretKey).toString();
  }

  /**
   * üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô QR Code
   */
  async getQRCodeStats() {
    // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô QR Code
    this.logger.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô QR Code (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ implement)');

    return {
      totalGenerated: 0,
      totalScanned: 0,
      successfulScans: 0,
      failedScans: 0,
      scansByDate: [],
      scansByLocation: [],
    };
  }
}
