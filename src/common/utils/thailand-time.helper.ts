// ========================================
// üåç TIMEZONE HELPER - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á
// ========================================

import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';
// import { LOCALIZATION } from '../constants';

dayjs.extend(utc);
dayjs.extend(timezone);

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡πÉ‡∏ä‡πâ Asia/Bangkok ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
 */
export class ThailandTimeHelper {
  private static readonly THAILAND_TIMEZONE = 'Asia/Bangkok';

  /**
   * ‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static now(): Date {
    return dayjs().tz(this.THAILAND_TIMEZONE).toDate();
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏î‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static toThailandTime(date: Date | string): Date {
    return dayjs(date).tz(this.THAILAND_TIMEZONE).toDate();
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏±‡∏ô (00:00:00) ‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static startOfDay(date?: Date | string): Date {
    return dayjs(date || this.now())
      .tz(this.THAILAND_TIMEZONE)
      .startOf('day')
      .toDate();
  }

  /**
   * ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô (23:59:59) ‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static endOfDay(date?: Date | string): Date {
    return dayjs(date || this.now())
      .tz(this.THAILAND_TIMEZONE)
      .endOf('day')
      .toDate();
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static startOfWeek(date?: Date | string): Date {
    return dayjs(date || this.now())
      .tz(this.THAILAND_TIMEZONE)
      .startOf('week')
      .toDate();
  }

  /**
   * ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static endOfWeek(date?: Date | string): Date {
    return dayjs(date || this.now())
      .tz(this.THAILAND_TIMEZONE)
      .endOf('week')
      .toDate();
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static startOfMonth(date?: Date | string): Date {
    return dayjs(date || this.now())
      .tz(this.THAILAND_TIMEZONE)
      .startOf('month')
      .toDate();
  }

  /**
   * ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static endOfMonth(date?: Date | string): Date {
    return dayjs(date || this.now())
      .tz(this.THAILAND_TIMEZONE)
      .endOf('month')
      .toDate();
  }

  /**
   * ‡∏ö‡∏ß‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static add(
    date: Date | string,
    amount: number,
    unit: 'day' | 'hour' | 'minute' | 'second' | 'week' | 'month' | 'year',
  ): Date {
    return dayjs(date).tz(this.THAILAND_TIMEZONE).add(amount, unit).toDate();
  }

  /**
   * ‡∏•‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static subtract(
    date: Date | string,
    amount: number,
    unit: 'day' | 'hour' | 'minute' | 'second' | 'week' | 'month' | 'year',
  ): Date {
    return dayjs(date)
      .tz(this.THAILAND_TIMEZONE)
      .subtract(amount, unit)
      .toDate();
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static format(date: Date | string, formatStr: string = 'YYYY-MM-DD'): string {
    return dayjs(date).tz(this.THAILAND_TIMEZONE).format(formatStr);
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static formatDateTime(
    date: Date | string,
    formatStr: string = 'YYYY-MM-DD HH:mm:ss',
  ): string {
    return dayjs(date).tz(this.THAILAND_TIMEZONE).format(formatStr);
  }

  /**
   * ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isSameDay(date1: Date | string, date2: Date | string): boolean {
    return dayjs(date1)
      .tz(this.THAILAND_TIMEZONE)
      .isSame(dayjs(date2).tz(this.THAILAND_TIMEZONE), 'day');
  }

  /**
   * ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isPast(date: Date | string): boolean {
    return dayjs(date).tz(this.THAILAND_TIMEZONE).isBefore(this.now());
  }

  /**
   * ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isFuture(date: Date | string): boolean {
    return dayjs(date).tz(this.THAILAND_TIMEZONE).isAfter(this.now());
  }

  /**
   * ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isExpired(expiresAt: Date | string): boolean {
    return dayjs(expiresAt).tz(this.THAILAND_TIMEZONE).isBefore(this.now());
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ô‡∏≤‡∏ó‡∏µ)
   */
  static getMinutesUntilExpiry(expiresAt: Date | string): number {
    return dayjs(expiresAt)
      .tz(this.THAILAND_TIMEZONE)
      .diff(this.now(), 'minute');
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏ß‡∏±‡∏ô
   */
  static daysBetween(date1: Date | string, date2: Date | string): number {
    return Math.abs(
      dayjs(date1)
        .tz(this.THAILAND_TIMEZONE)
        .diff(dayjs(date2).tz(this.THAILAND_TIMEZONE), 'day'),
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ß‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 21:00)
   */
  static createOrderExpiry(showDate: Date | string): Date {
    return dayjs(showDate)
      .tz(this.THAILAND_TIMEZONE)
      .hour(21)
      .minute(0)
      .second(0)
      .millisecond(0)
      .toDate();
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á (+ 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
   */
  static createSeatReservationExpiry(): Date {
    return this.add(this.now(), 5, 'minute');
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isToday(date: Date | string): boolean {
    return this.isSameDay(date, this.now());
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isYesterday(date: Date | string): boolean {
    return this.isSameDay(date, this.subtract(this.now(), 1, 'day'));
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isThisWeek(date: Date | string): boolean {
    const startOfWeek = this.startOfWeek();
    const endOfWeek = this.endOfWeek();
    const checkDate = dayjs(date).tz(this.THAILAND_TIMEZONE);

    return checkDate.isAfter(startOfWeek) && checkDate.isBefore(endOfWeek);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isThisMonth(date: Date | string): boolean {
    const startOfMonth = this.startOfMonth();
    const endOfMonth = this.endOfMonth();
    const checkDate = dayjs(date).tz(this.THAILAND_TIMEZONE);

    return checkDate.isAfter(startOfMonth) && checkDate.isBefore(endOfMonth);
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô ISO string ‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
   */
  static toISOString(date: Date | string): string {
    return dayjs(date).tz(this.THAILAND_TIMEZONE).toISOString();
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô format ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö database
   */
  static toDBFormat(date: Date | string): string {
    return dayjs(date).tz(this.THAILAND_TIMEZONE).format('YYYY-MM-DD');
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô format ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö database
   */
  static toDBDateTime(date: Date | string): string {
    return dayjs(date).tz(this.THAILAND_TIMEZONE).format('YYYY-MM-DD HH:mm:ss');
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö query (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô-‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô)
   */
  static createDayRange(date: Date | string): { start: Date; end: Date } {
    return {
      start: this.startOfDay(date),
      end: this.endOfDay(date),
    };
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö query (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô-‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)
   */
  static createWeekRange(date?: Date | string): { start: Date; end: Date } {
    return {
      start: this.startOfWeek(date),
      end: this.endOfWeek(date),
    };
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö query (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô-‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
   */
  static createMonthRange(date?: Date | string): { start: Date; end: Date } {
    return {
      start: this.startOfMonth(date),
      end: this.endOfMonth(date),
    };
  }

  /**
   * debug - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
   */
  static debug(date: Date | string, label?: string): void {
    const formatted = this.formatDateTime(date, 'YYYY-MM-DD HH:mm:ss');
    console.log(`[Thailand Time] ${label || 'Debug'}: ${formatted}`);
  }
}

// Export ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
export const ThaiTime = ThailandTimeHelper;
