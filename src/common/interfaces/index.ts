// ========================================
// üéØ COMMON INTERFACES - ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
// ========================================

import {
  OrderStatus,
  PaymentMethod,
  TicketType,
  OrderSource,
  PaymentStatus,
  StandingTicketType,
  UserRole,
  SeatStatus,
} from '../enums';

// üó∫Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á (ZoneData)
export interface ZoneData {
  id: string;
  name: string;
  description?: string;
  totalSeats: number;
  availableSeats: number;
  bookedSeats: number;
  price: number;
}
// üé´ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏à‡∏≤‡∏Å OCR
export interface TicketOrderOCR {
  orderNumber: string; // ‡πÄ‡∏ä‡πà‡∏ô HKT-11274
  customerName: string; // ‡πÄ‡∏ä‡πà‡∏ô Demi Dauria
  customerPhone?: string; // ‡πÄ‡∏ä‡πà‡∏ô +66..., optional
  ticketType: string; // ‡πÄ‡∏ä‡πà‡∏ô Ringside, Stadium, VIP
  quantity: number; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô 2
  price: number; // ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ‡πÄ‡∏ä‡πà‡∏ô 1500, 10500
  paymentStatus: 'Paid' | 'Unpaid';
  paymentMethod?: string; // ‡πÄ‡∏ä‡πà‡∏ô Credit / Debit Card
  travelDate: string; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏°‡∏ß‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô 2025-07-03
  orderDate?: string; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÄ‡∏ä‡πà‡∏ô 2025-07-02
  pickupHotel?: string; // ‡πÄ‡∏ä‡πà‡∏ô Zenmaya Ocean Front
  dropoffLocation?: string; // ‡πÄ‡∏ä‡πà‡∏ô Phuket Leelavadee
  voucherCode?: string; // ‡πÄ‡∏ä‡πà‡∏ô y4g151ey, 93666049
  referenceNo?: string; // ‡πÄ‡∏ä‡πà‡∏ô 429964653724520
  source?: string; // ‡πÄ‡∏ä‡πà‡∏ô KKDAY, SAYAMA, ASIA Thailand
  seatNumbers?: string[]; // ‡πÄ‡∏ä‡πà‡∏ô ["407", "408"]
  note?: string; // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ ‡πÄ‡∏ä‡πà‡∏ô "‡πÅ‡∏à‡∏Å‡πÄ‡∏™‡∏∑‡πâ‡∏≠"
}

// üì± ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡πÉ‡∏ä‡πâ interface ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
export interface OrderData {
  id: string;
  orderNumber: string;
  customerName: string;
  customerPhone?: string;
  email?: string;
  ticketType: TicketType | string;
  quantity: number;
  price: number;
  totalAmount: number;
  referrerCommission?: number;
  status: OrderStatus | string;
  paymentMethod?: PaymentMethod | string;
  paymentStatus: PaymentStatus | string;
  showDate: string;
  createdAt: Date;
  updatedAt: Date;
  expiresAt?: Date;
  referrerCode?: string;
  source?: OrderSource | string;
  purchaseType?: string; // WEBSITE, BOOKING, ONSITE
  attendanceStatus?: string;
  seatNumbers?: string[];
  standingTickets?: StandingTicketData[];
  note?: string;
  slipUrl?: string;
  createdBy?: string;
  createdById?: string;
  updatedBy?: string;
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
  createdByName?: string | null;
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Å‡∏î‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  paidByName?: string | null;
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  lastUpdatedByName?: string | null;
  standingAdultQty?: number;
  standingChildQty?: number;
  standingTotal?: number;
  standingCommission?: number;
  referrer?: {
    id: string;
    code: string;
    name: string;
  } | null;
  seats: Array<{
    id: string;
    seatNumber: string;
    zone: {
      id: string;
      name: string;
    } | null;
  }>;
}

// üé™ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô
export interface StandingTicketData {
  id: string;
  type: StandingTicketType;
  quantity: number;
  price: number;
  totalAmount: number;
}

// üí∫ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
export interface SeatData {
  id: string;
  seatNumber: string;
  row: number;
  column: number;
  zoneId: string;
  zoneName: string;
  status: SeatStatus;
  price: number;
  isLocked: boolean;
  lockedUntil?: Date;
  lockedBy?: string;
}

// üè∑Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ã‡∏ô (‡∏•‡∏ö OrderData ‡∏ã‡πâ‡∏≥)

// üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
export interface UserData {
  id: string;
  email: string;
  name?: string;
  phone?: string;
  avatar?: string;
  role: UserRole;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
  totalOrders: number;
  totalSpent: number;
  lastLoginAt?: Date;
}

// üè∑Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≤‡∏¢
export interface ReferrerData {
  id: string;
  name: string;
  code: string;
  email?: string;
  phone?: string;
  totalCommission: number;
  totalOrders: number;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

// üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
export interface DashboardStats {
  totalSales: number;
  totalOrders: number;
  totalCustomers: number;
  availableSeats: number;
  todayOrders: number;
  todaySales: number;
  ordersByStatus: Record<OrderStatus, number>;
  salesByMethod: Record<PaymentMethod, number>;
  salesByZone: Array<{ zone: string; total: number }>;
  topReferrers: Array<{ name: string; commission: number }>;
  topCustomers: Array<{ name: string; spent: number }>;
  nextShowDate: string;
  nextShowAvailable: number;
  nextShowBooked: number;
}

// üì± ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö API
export interface ApiResponse<T = any> {
  success: boolean;
  message: string;
  data?: T;
  error?: string;
  timestamp: Date;
  pagination?: PaginationMeta;
}

// üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
export interface PaginationMeta {
  page: number;
  limit: number;
  total: number;
  totalPages: number;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
}

// üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
export interface SearchFilters {
  search?: string;
  status?: OrderStatus;
  paymentMethod?: PaymentMethod;
  ticketType?: TicketType;
  source?: OrderSource;
  dateFrom?: string;
  dateTo?: string;
  showDate?: string;
  referrerCode?: string;
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: 'ASC' | 'DESC';
}

// üé® ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°
export interface ThemeConfig {
  primaryColor: string;
  secondaryColor: string;
  backgroundColor: string;
  textColor: string;
  borderColor: string;
  fontSize: number;
  borderRadius: number;
}

// üìß ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏•
export interface EmailData {
  to: string;
  subject: string;
  template: string;
  data: Record<string, any>;
  attachments?: Array<{
    filename: string;
    content: Buffer;
    contentType: string;
  }>;
}

// üì± ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
export interface NotificationData {
  id: string;
  userId: string;
  type: string;
  title: string;
  message: string;
  data?: Record<string, any>;
  isRead: boolean;
  createdAt: Date;
}

// üéØ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
export interface SystemSettings {
  siteName: string;
  siteUrl: string;
  timezone: string;
  currency: string;
  language: string;
  emailEnabled: boolean;
  smsEnabled: boolean;
  maintenanceMode: boolean;
  allowRegistration: boolean;
  requireEmailVerification: boolean;
}

// üîê ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
export interface AuthData {
  user: UserData;
  accessToken: string;
  refreshToken: string;
  expiresAt: Date;
  permissions: string[];
}

// üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
export interface ReportData {
  id: string;
  name: string;
  type: string;
  data: any;
  generatedAt: Date;
  generatedBy: string;
  fileUrl?: string;
  parameters: Record<string, any>;
}

// üéÆ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏°
export interface ShowSettings {
  id: string;
  name: string;
  date: string;
  startTime: string;
  endTime: string;
  venue: string;
  description?: string;
  isActive: boolean;
  totalSeats: number;
  availableSeats: number;
  ticketSalesStart: Date;
  ticketSalesEnd: Date;
  pricing: Record<TicketType, number>;
}

// üèÜ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
export interface ShowData {
  id: string;
  name: string;
  date: string;
  startTime: string;
  endTime: string;
  venue: string;
  description?: string;
  poster?: string;
  isActive: boolean;
  totalSeats: number;
  availableSeats: number;
  bookedSeats: number;
  revenue: number;
  zones: ZoneData[];
  settings: ShowSettings;
}

// üé´ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß
export interface TicketData {
  id: string;
  orderId: string;
  orderNumber: string;
  customerName: string;
  showDate: string;
  showTime: string;
  venue: string;
  ticketType: TicketType;
  seatNumber?: string;
  zoneName?: string;
  price: number;
  qrCode: string;
  isUsed: boolean;
  usedAt?: Date;
  generatedAt: Date;
}
