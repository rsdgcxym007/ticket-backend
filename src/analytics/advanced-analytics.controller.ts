import {
  Controller,
  Get,
  Query,
  Post,
  Body,
  UseGuards,
  Logger,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiQuery,
  ApiBody,
} from '@nestjs/swagger';
import {
  AdvancedAnalyticsService,
  PredictionResult,
  BusinessInsight,
  RevenueOptimization,
  RealTimeAnalytics,
} from './advanced-analytics.service';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { Roles } from '../auth/roles.decorator';
import { RolesGuard } from '../auth/roles.guard';
import { UserRole } from '../auth/roles.enum';
import { Throttle } from '@nestjs/throttler';

export class CustomAnalyticsQueryDto {
  metrics: string[];
  filters: Record<string, any>;
  groupBy?: string[];
  dateRange: { start: Date; end: Date };
  aggregation?: 'sum' | 'avg' | 'count' | 'max' | 'min';
}

@ApiTags('üß† Advanced Analytics Engine')
@Controller('analytics/advanced')
@UseGuards(JwtAuthGuard, RolesGuard)
export class AdvancedAnalyticsController {
  private readonly logger = new Logger(AdvancedAnalyticsController.name);

  constructor(
    private readonly advancedAnalyticsService: AdvancedAnalyticsService,
  ) {}

  /**
   * üìà ML-Powered Sales Prediction
   */
  @Get('predictions/sales')
  @Throttle({ default: { limit: 10, ttl: 60000 } })
  @Roles(UserRole.ADMIN, UserRole.STAFF)
  @ApiOperation({
    summary: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Machine Learning',
    description: '‡πÉ‡∏ä‡πâ Linear Regression ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï',
  })
  @ApiQuery({
    name: 'days',
    required: false,
    type: Number,
    description: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: 30)',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢',
    type: Object,
  })
  async predictSales(@Query('days') days?: number): Promise<PredictionResult> {
    try {
      this.logger.log(`üîÆ Predicting sales for ${days || 30} days using ML`);
      return await this.advancedAnalyticsService.predictSales(days);
    } catch (error) {
      this.logger.error('‚ùå Sales prediction failed', error);
      throw error;
    }
  }

  /**
   * üéØ Advanced Demand Forecasting
   */
  @Get('predictions/demand')
  @Throttle({ default: { limit: 10, ttl: 60000 } })
  @Roles(UserRole.ADMIN, UserRole.STAFF)
  @ApiOperation({
    summary: '‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ AI',
    description: '‡πÉ‡∏ä‡πâ Exponential Smoothing ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
  })
  @ApiQuery({
    name: 'zoneId',
    required: false,
    type: String,
    description: 'ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
    type: Object,
  })
  async forecastDemand(
    @Query('zoneId') zoneId?: string,
  ): Promise<PredictionResult> {
    try {
      this.logger.log(`üìä Forecasting demand for zone: ${zoneId || 'all'}`);
      return await this.advancedAnalyticsService.forecastDemand(zoneId);
    } catch (error) {
      this.logger.error('‚ùå Demand forecasting failed', error);
      throw error;
    }
  }

  /**
   * üí∞ Revenue Optimization
   */
  @Get('optimization/revenue')
  @Throttle({ default: { limit: 5, ttl: 60000 } })
  @Roles(UserRole.ADMIN)
  @ApiOperation({
    summary: '‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ AI',
    description: '‡πÉ‡∏ä‡πâ Price Elasticity Analysis ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
  })
  @ApiQuery({
    name: 'zoneId',
    required: true,
    type: String,
    description: 'ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ',
    type: Object,
  })
  async optimizeRevenue(
    @Query('zoneId') zoneId: string,
  ): Promise<RevenueOptimization> {
    try {
      this.logger.log(`üí° Optimizing revenue for zone: ${zoneId}`);
      return await this.advancedAnalyticsService.optimizeRevenue(zoneId);
    } catch (error) {
      this.logger.error('‚ùå Revenue optimization failed', error);
      throw error;
    }
  }

  /**
   * üß† AI-Generated Business Insights
   */
  @Get('insights')
  @Throttle({ default: { limit: 10, ttl: 60000 } })
  @Roles(UserRole.ADMIN, UserRole.STAFF)
  @ApiOperation({
    summary: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏î‡πâ‡∏ß‡∏¢ AI',
    description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏î‡πâ‡∏ß‡∏¢ Pattern Recognition',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
    type: [Object],
  })
  async getBusinessInsights(): Promise<BusinessInsight[]> {
    try {
      this.logger.log('üéØ Generating AI-powered business insights');
      return await this.advancedAnalyticsService.generateBusinessInsights();
    } catch (error) {
      this.logger.error('‚ùå Business insights generation failed', error);
      throw error;
    }
  }

  /**
   * ‚ö° Real-time Analytics Dashboard
   */
  @Get('dashboard/realtime')
  @Throttle({ default: { limit: 30, ttl: 60000 } })
  @Roles(UserRole.ADMIN, UserRole.STAFF)
  @ApiOperation({
    summary: '‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå',
    description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå',
    type: Object,
  })
  async getRealTimeAnalytics(): Promise<RealTimeAnalytics> {
    try {
      this.logger.log('üìä Generating real-time analytics dashboard');
      return await this.advancedAnalyticsService.getRealTimeAnalytics();
    } catch (error) {
      this.logger.error('‚ùå Real-time analytics failed', error);
      throw error;
    }
  }

  /**
   * üîç Custom Analytics Query Engine
   */
  @Post('query/custom')
  @Throttle({ default: { limit: 20, ttl: 60000 } })
  @Roles(UserRole.ADMIN, UserRole.STAFF)
  @ApiOperation({
    summary: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏∑‡∏ö‡∏Ñ‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á',
    description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ Query Engine',
  })
  @ApiBody({
    type: CustomAnalyticsQueryDto,
    description: '‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡∏ö‡∏Ñ‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡∏ö‡∏Ñ‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
    type: [Object],
  })
  async executeCustomQuery(
    @Body() query: CustomAnalyticsQueryDto,
  ): Promise<any[]> {
    try {
      this.logger.log('üîç Executing custom analytics query');
      return await this.advancedAnalyticsService.executeCustomAnalyticsQuery(
        query,
      );
    } catch (error) {
      this.logger.error('‚ùå Custom query execution failed', error);
      throw error;
    }
  }

  /**
   * üìà Performance Analytics
   */
  @Get('performance')
  @Throttle({ default: { limit: 10, ttl: 60000 } })
  @Roles(UserRole.ADMIN)
  @ApiOperation({
    summary: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö',
    description: '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ ML',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
    type: Object,
  })
  async getPerformanceAnalytics() {
    try {
      this.logger.log('‚ö° Analyzing system performance with ML');
      return await this.advancedAnalyticsService.getPerformanceAnalytics();
    } catch (error) {
      this.logger.error('‚ùå Performance analytics failed', error);
      throw error;
    }
  }

  /**
   * ü§ñ ML Model Performance
   */
  @Get('models/performance')
  @Throttle({ default: { limit: 5, ttl: 60000 } })
  @Roles(UserRole.ADMIN)
  @ApiOperation({
    summary: '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• ML ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏• ML',
    type: Object,
  })
  async getModelPerformance() {
    try {
      this.logger.log('üî¨ Checking ML model performance');
      return this.advancedAnalyticsService.getModelPerformance();
    } catch (error) {
      this.logger.error('‚ùå Model performance check failed', error);
      throw error;
    }
  }

  /**
   * üßπ Clear Analytics Cache
   */
  @Post('cache/clear')
  @Throttle({ default: { limit: 5, ttl: 300000 } }) // 5 requests per 5 minutes
  @Roles(UserRole.ADMIN)
  @ApiOperation({
    summary: '‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
    description: '‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà',
  })
  @ApiResponse({
    status: 200,
    description: '‡πÅ‡∏Ñ‡∏ä‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
    schema: {
      type: 'object',
      properties: {
        message: { type: 'string' },
        timestamp: { type: 'string' },
      },
    },
  })
  async clearAnalyticsCache() {
    try {
      this.logger.log('üßπ Clearing analytics cache');
      this.advancedAnalyticsService.clearCache();
      return {
        message: 'Analytics cache cleared successfully',
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error('‚ùå Cache clearing failed', error);
      throw error;
    }
  }
}
