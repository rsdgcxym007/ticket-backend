import {
  Controller,
  Post,
  Get,
  Body,
  UseGuards,
  Query,
  Param,
  HttpStatus,
  HttpException,
  Logger,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
} from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { UserRole } from '../common/enums';
import { EmailAutomationService } from './email-automation.service';
import {
  SendTicketEmailDto,
  SendBulkEmailDto,
  EmailTemplateDto,
  EmailStatsDto,
} from './dto/email-automation.dto';

@ApiTags('üìß Email Automation')
@Controller('api/v1/email')
@UseGuards(JwtAuthGuard, RolesGuard)
@ApiBearerAuth()
export class EmailAutomationController {
  private readonly logger = new Logger(EmailAutomationController.name);

  constructor(private readonly emailService: EmailAutomationService) {}

  /**
   * üìß ‡∏™‡πà‡∏á‡∏ï‡∏±‡πã‡∏ß QR Code ‡∏ó‡∏≤‡∏á Email
   */
  @Post('send-ticket')
  @Roles(UserRole.STAFF, UserRole.ADMIN, UserRole.MANAGER)
  @ApiOperation({
    summary: '‡∏™‡πà‡∏á‡∏ï‡∏±‡πã‡∏ß QR Code ‡∏ó‡∏≤‡∏á Email',
    description: '‡∏™‡πà‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏° QR Code ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≤‡∏á email ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
  })
  @ApiResponse({
    status: 200,
    description: '‡∏™‡πà‡∏á email ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    schema: {
      example: {
        success: true,
        data: {
          messageId: 'email-msg-001',
          orderId: 'ORD-20250811-001',
          recipientEmail: 'customer@example.com',
          sentAt: '2025-08-11T14:30:00.000Z',
        },
        message: '‡∏™‡πà‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏≤‡∏á email ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      },
    },
  })
  async sendTicketEmail(@Body() sendTicketDto: SendTicketEmailDto) {
    try {
      this.logger.log(
        `üìß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏≤‡∏á email ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${sendTicketDto.orderId}`,
      );

      const result = await this.emailService.sendTicketEmail(sendTicketDto);

      this.logger.log(`‚úÖ ‡∏™‡πà‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏≤‡∏á email ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.messageId}`);

      return {
        success: true,
        data: result,
        message: '‡∏™‡πà‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏≤‡∏á email ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email: ${error.message}`);
      throw new HttpException(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * üìß ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
   */
  @Post('send-confirmation')
  @Roles(UserRole.STAFF, UserRole.ADMIN, UserRole.MANAGER)
  @ApiOperation({
    summary: '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
    description: '‡∏™‡πà‡∏á email ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
  })
  async sendOrderConfirmation(@Body() confirmationDto: any) {
    try {
      this.logger.log(
        `üìß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${confirmationDto.orderId}`,
      );

      const result =
        await this.emailService.sendOrderConfirmation(confirmationDto);

      return {
        success: true,
        data: result,
        message: '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ${error.message}`);
      throw new HttpException(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * üìß ‡∏™‡πà‡∏á Email ‡πÅ‡∏ö‡∏ö Bulk
   */
  @Post('send-bulk')
  @Roles(UserRole.ADMIN, UserRole.MANAGER)
  @ApiOperation({
    summary: '‡∏™‡πà‡∏á Email ‡πÅ‡∏ö‡∏ö Bulk',
    description: '‡∏™‡πà‡∏á email ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô',
  })
  async sendBulkEmail(@Body() bulkEmailDto: SendBulkEmailDto) {
    try {
      this.logger.log(
        `üìß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á bulk email ‡πÉ‡∏´‡πâ ${bulkEmailDto.recipients.length} ‡∏Ñ‡∏ô`,
      );

      const result = await this.emailService.sendBulkEmail(bulkEmailDto);

      return {
        success: true,
        data: result,
        message: `‡∏™‡πà‡∏á bulk email ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${result.successCount}/${result.totalCount} ‡∏≠‡∏±‡∏ô`,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(
        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á bulk email: ${error.message}`,
      );
      throw new HttpException(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á bulk email',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * üìß ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Email Templates
   */
  @Get('templates')
  @Roles(UserRole.STAFF, UserRole.ADMIN, UserRole.MANAGER)
  @ApiOperation({
    summary: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Email Templates',
    description: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ email templates ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà',
  })
  async getEmailTemplates() {
    try {
      const templates = await this.emailService.getEmailTemplates();

      return {
        success: true,
        data: templates,
        message: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ templates ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(
        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á templates: ${error.message}`,
      );
      throw new HttpException(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á templates',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * üìß ‡∏™‡∏£‡πâ‡∏≤‡∏á Email Template ‡πÉ‡∏´‡∏°‡πà
   */
  @Post('templates')
  @Roles(UserRole.ADMIN, UserRole.MANAGER)
  @ApiOperation({
    summary: '‡∏™‡∏£‡πâ‡∏≤‡∏á Email Template ‡πÉ‡∏´‡∏°‡πà',
    description: '‡∏™‡∏£‡πâ‡∏≤‡∏á email template ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email',
  })
  async createEmailTemplate(@Body() templateDto: EmailTemplateDto) {
    try {
      this.logger.log(`üìß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á email template: ${templateDto.name}`);

      const result = await this.emailService.createEmailTemplate(templateDto);

      return {
        success: true,
        data: result,
        message: '‡∏™‡∏£‡πâ‡∏≤‡∏á email template ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(
        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á template: ${error.message}`,
      );
      throw new HttpException(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á template',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * üìß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á Email
   */
  @Post('test')
  @Roles(UserRole.ADMIN, UserRole.MANAGER)
  @ApiOperation({
    summary: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á Email',
    description: '‡∏™‡πà‡∏á test email ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
  })
  async sendTestEmail(@Body() testEmailDto: any) {
    try {
      this.logger.log(`üìß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á test email ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${testEmailDto.email}`);

      const result = await this.emailService.sendTestEmail(testEmailDto);

      return {
        success: true,
        data: result,
        message: '‡∏™‡πà‡∏á test email ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(
        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á test email: ${error.message}`,
      );
      throw new HttpException(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á test email',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Email
   */
  @Get('stats')
  @Roles(UserRole.ADMIN, UserRole.MANAGER)
  @ApiOperation({
    summary: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Email',
    description: '‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö',
  })
  async getEmailStats(@Query() statsDto: EmailStatsDto) {
    try {
      this.logger.log('üìä ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email');

      const stats = await this.emailService.getEmailStats(statsDto);

      return {
        success: true,
        data: stats,
        message: '‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: ${error.message}`);
      throw new HttpException(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * üìß ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Email
   */
  @Get('history')
  @Roles(UserRole.ADMIN, UserRole.MANAGER)
  @ApiOperation({
    summary: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Email',
    description: '‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
  })
  async getEmailHistory(@Query() query: any) {
    try {
      this.logger.log('üìß ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email');

      const history = await this.emailService.getEmailHistory(query);

      return {
        success: true,
        data: history,
        message: '‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥: ${error.message}`);
      throw new HttpException(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * üîÑ ‡∏™‡πà‡∏á Email ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏´‡∏°‡πà
   */
  @Post('retry/:messageId')
  @Roles(UserRole.ADMIN, UserRole.MANAGER)
  @ApiOperation({
    summary: '‡∏™‡πà‡∏á Email ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏´‡∏°‡πà',
    description: '‡∏™‡πà‡∏á email ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
  })
  @ApiParam({
    name: 'messageId',
    description: '‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° email ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà',
  })
  async retryFailedEmail(@Param('messageId') messageId: string) {
    try {
      this.logger.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á email ‡πÉ‡∏´‡∏°‡πà: ${messageId}`);

      const result = await this.emailService.retryFailedEmail(messageId);

      return {
        success: true,
        data: result,
        message: '‡∏™‡πà‡∏á email ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(
        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email ‡πÉ‡∏´‡∏°‡πà: ${error.message}`,
      );
      throw new HttpException(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email ‡πÉ‡∏´‡∏°‡πà',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}
