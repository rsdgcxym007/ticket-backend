import {
  Controller,
  Post,
  Get,
  Param,
  Patch,
  Delete,
  Body,
  Req,
  UseGuards,
  Query,
  ParseUUIDPipe,
  Logger,
} from '@nestjs/common';
import { OrderService } from './order.service';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
import { ChangeSeatsDto } from './dto/change-seats.dto';
import { error, success } from '../common/responses';
import { ApiResponseHelper } from '../common/utils';
import {
  ApiTags,
  ApiBearerAuth,
  ApiOperation,
  ApiResponse,
  ApiQuery,
} from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { UserRole } from '../common/enums';
import { AuthenticatedRequest } from '../common/interfaces/auth.interface';
import { OrderData } from '../common/interfaces';
import { EnhancedOrderService } from '../common/services/enhanced-order.service';
import { ConcurrencyService } from '../common/services/concurrency.service';
import { DuplicateOrderPreventionService } from '../common/services/duplicate-order-prevention.service';
import { OrderUpdatesGateway } from '../common/gateways/order-updates.gateway';

@ApiTags('Orders')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard, RolesGuard)
@Controller('orders')
export class OrderController {
  private readonly logger = new Logger(OrderController.name);

  constructor(
    private readonly orderService: OrderService,
    private readonly enhancedOrderService: EnhancedOrderService,
    private readonly concurrencyService: ConcurrencyService,
    private readonly duplicatePreventionService: DuplicateOrderPreventionService,
    private readonly orderUpdatesGateway: OrderUpdatesGateway, // Inject the WebSocket gateway
  ) {}

  /**
   * üé´ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà (Enhanced with Concurrency Protection)
   */
  @Post()
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition)' })
  @ApiResponse({ status: 201, description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
  @ApiResponse({ status: 403, description: '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á' })
  @ApiResponse({
    status: 409,
    description: '‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
  })
  @ApiResponse({ status: 429, description: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ' })
  async createOrder(
    @Body() dto: CreateOrderDto,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      this.logger.log(
        `üõ°Ô∏è Enhanced order creation request from user: ${req.user.id}`,
      );

      // ‚úÖ ‡πÉ‡∏ä‡πâ Enhanced Order Service ‡πÅ‡∏ó‡∏ô Legacy Service
      const data =
        await this.enhancedOrderService.createOrderWithConcurrencyControl(
          req.user.id,
          dto,
        );

      this.logger.log(
        `‚úÖ Enhanced order created successfully for user: ${req.user.id}`,
      );
      return success(data, '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition)', req);
    } catch (err) {
      this.logger.error(
        `‚ùå Error creating enhanced order for user: ${req.user.id}`,
        err.stack,
      );

      // Handle specific concurrency errors
      if (
        err.message.includes('duplicate') ||
        err.message.includes('DUPLICATE')
      ) {
        return error(err.message, '409', req);
      }
      if (
        err.message.includes('rate limit') ||
        err.message.includes('RATE_LIMIT')
      ) {
        return error(err.message, '429', req);
      }

      return error(err.message, '400', req);
    }
  }

  /**
   * üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  @Get()
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiQuery({ name: 'page', required: false, type: Number })
  @ApiQuery({ name: 'limit', required: false, type: Number })
  @ApiQuery({
    name: 'status',
    required: false,
    enum: ['PENDING', 'CONFIRMED', 'CANCELLED'],
  })
  @ApiQuery({ name: 'search', required: false, type: String })
  async findAll(
    @Req() req: AuthenticatedRequest,
    @Query('page') page: number = 1,
    @Query('limit') limit: number = 10,
    @Query('status') status?: string,
    @Query('search') search?: string,
  ) {
    try {
      const result = await this.orderService.findAll(
        { page, limit, status, search },
        req.user.id,
      );

      return ApiResponseHelper.paginated(
        result.items,
        result.total,
        result.page,
        result.limit,
        '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      );
    } catch (err) {
      return ApiResponseHelper.error(
        err.message,
        err.status || 400,
        'ORD_FIND_ALL_ERROR',
      );
    }
  }

  /**
   * üîç ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Get(':id')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  async findById(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const data = await this.orderService.findById(id, req.user.id);
      console.log('datadatadata', data);

      return success(data, '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '404', req);
    }
  }

  /**
   * ‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Patch(':id')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  async update(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() dto: UpdateOrderDto,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const updates: Partial<OrderData> = {
        ...dto,
        showDate: dto.showDate ? dto.showDate : undefined,
        expiresAt: dto.expiresAt ? new Date(dto.expiresAt) : undefined,
      };

      const data = await this.orderService.update(id, updates, req.user.id);
      return success(data, '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (Enhanced with Concurrency Protection)
   */
  @Patch(':id/cancel')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition)' })
  @ApiResponse({ status: 200, description: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ' })
  @ApiResponse({ status: 409, description: '‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß' })
  async cancel(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      this.logger.log(
        `üõ°Ô∏è Enhanced cancel request for order: ${id} by user: ${req.user.id}`,
      );

      // ‚úÖ ‡πÉ‡∏ä‡πâ Enhanced Order Service ‡πÅ‡∏ó‡∏ô Legacy Service
      const result =
        await this.enhancedOrderService.cancelOrderWithConcurrencyControl(
          id,
          req.user.id,
        );

      this.logger.log(`‚úÖ Enhanced cancel successful for order: ${id}`);
      return success(
        result,
        '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition)',
        req,
      );
    } catch (err) {
      this.logger.error(`‚ùå Error cancelling order: ${id}`, err.stack);

      if (
        err.message.includes('already processed') ||
        err.message.includes('CONFLICT')
      ) {
        return error(err.message, '409', req);
      }

      return error(err.message, '400', req);
    }
  }

  /**
   * ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
   */
  @Patch(':id/confirm-payment')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô' })
  @ApiResponse({ status: 200, description: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ' })
  async confirmPayment(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const result = await this.orderService.confirmPayment(id, req.user.id);
      return success(result, '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üéüÔ∏è ‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß
   */
  @Get(':id/tickets')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß' })
  @ApiResponse({ status: 200, description: '‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡πÑ‡∏î‡πâ' })
  async generateTickets(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const tickets = await this.orderService.generateTickets(id, req.user.id);
      return success(tickets, '‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
   */
  @Patch(':id/change-seats')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á' })
  @ApiResponse({ status: 200, description: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ' })
  async changeSeats(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() changeSeatsDto: ChangeSeatsDto,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const result = await this.orderService.changeSeats(
        id,
        changeSeatsDto.seatIds, // These are now seat numbers, not IDs
        req.user.id,
        changeSeatsDto.newReferrerCode,
        changeSeatsDto.newCustomerName,
        changeSeatsDto.newCustomerPhone,
        changeSeatsDto.newCustomerEmail,
        changeSeatsDto.newShowDate,
      );
      return success(result, '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Get('stats/overview')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async getStats(@Req() req: AuthenticatedRequest) {
    try {
      const stats = await this.orderService.getOrderStats();
      return success(stats, '‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üóëÔ∏è ‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
   */
  @Delete(':id')
  @Roles(UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  async remove(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const data = await this.orderService.remove(id, req.user.id);
      return success(data, '‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '404', req);
    }
  }

  /**
   * üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Standing
   */
  @Patch(':id/update-standing-order')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó TicketType.STANDING' })
  @ApiResponse({ status: 200, description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  async updateStandingOrder(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() dto: UpdateOrderDto,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const updates: Partial<OrderData> = {
        ...dto,
        showDate: dto.showDate ? dto.showDate : undefined,
        expiresAt: dto.expiresAt ? new Date(dto.expiresAt) : undefined,
      };

      const data = await this.orderService.updateStandingOrder(
        id,
        updates,
        req.user.id,
      );
      return success(data, '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  // =============================================
  // üõ°Ô∏è ENHANCED CONCURRENCY CONTROL ENDPOINTS
  // =============================================

  /**
   * üîí ‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö frontend)
   */
  @Post('seats/lock')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition)' })
  @ApiResponse({ status: 201, description: '‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 409, description: '‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß' })
  async lockSeats(
    @Body() dto: { seatIds: string[]; showDate: string },
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      this.logger.log(`üîí Locking seats for user: ${req.user.id}`, dto);

      const result = await this.concurrencyService.lockSeatsForOrder(
        dto.seatIds,
        dto.showDate,
        5, // 5 minutes lock
      );

      // ‚úÖ Send real-time notification to frontend
      this.orderUpdatesGateway.notifySeatLocked({
        seatIds: dto.seatIds,
        showDate: dto.showDate,
        userId: req.user.id,
        message: 'Seats locked temporarily',
      });

      this.logger.log(`‚úÖ Seats locked successfully for user: ${req.user.id}`);
      return success(result, '‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      this.logger.error(
        `‚ùå Error locking seats for user: ${req.user.id}`,
        err.stack,
      );

      if (
        err.message.includes('already locked') ||
        err.message.includes('CONFLICT')
      ) {
        return error(err.message, '409', req);
      }

      return error(err.message, '400', req);
    }
  }

  /**
   * üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
   */
  @Post('seats/unlock')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß' })
  @ApiResponse({ status: 200, description: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async unlockSeats(
    @Body() dto: { seatIds: string[]; showDate: string },
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      this.logger.log(`üîì Unlocking seats for user: ${req.user.id}`, dto);

      const result = await this.concurrencyService.releaseSeatLocks(
        dto.seatIds,
      );

      // ‚úÖ Send real-time notification to frontend
      this.orderUpdatesGateway.notifySeatUnlocked({
        seatIds: dto.seatIds,
        showDate: dto.showDate,
        userId: req.user.id,
        message: 'Seats unlocked',
      });

      this.logger.log(
        `‚úÖ Seats unlocked successfully for user: ${req.user.id}`,
      );
      return success(result, '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      this.logger.error(
        `‚ùå Error unlocking seats for user: ${req.user.id}`,
        err.stack,
      );
      return error(err.message, '400', req);
    }
  }

  /**
   * üíì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö Concurrency
   */
  @Get('system/health')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö Concurrency' })
  @ApiResponse({ status: 200, description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö' })
  async getSystemHealth(@Req() req: AuthenticatedRequest) {
    try {
      const health = await this.enhancedOrderService.getSystemHealth();
      return success(health, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
   */
  @Post('system/cleanup')
  @Roles(UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' })
  @ApiResponse({ status: 200, description: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async cleanupExpiredLocks(@Req() req: AuthenticatedRequest) {
    try {
      this.logger.log('üßπ Manual cleanup triggered by admin');

      // ‡πÉ‡∏ä‡πâ ConcurrencyService ‡πÅ‡∏ó‡∏ô
      await this.concurrencyService.cleanupExpiredSeatLocks();

      this.logger.log('‚úÖ Manual cleanup completed');
      return success(
        { message: 'Cleanup completed' },
        '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        req,
      );
    } catch (err) {
      this.logger.error('‚ùå Error during manual cleanup', err.stack);
      return error(err.message, '400', req);
    }
  }

  /**
   * üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Enhanced Order System
   */
  @Get('system/stats')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Enhanced Order System' })
  @ApiResponse({ status: 200, description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö' })
  async getEnhancedSystemStats(@Req() req: AuthenticatedRequest) {
    try {
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      const basicStats = {
        timestamp: new Date().toISOString(),
        systemStatus: 'Enhanced Order System Active',
        features: [
          'Concurrency Control',
          'Duplicate Prevention',
          'Seat Locking',
          'Atomic Transactions',
        ],
      };

      return success(basicStats, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö Enhanced', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }
}
