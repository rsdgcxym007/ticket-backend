import {
  Controller,
  Post,
  Get,
  Param,
  Patch,
  Delete,
  Body,
  Req,
  Res,
  UseGuards,
  Query,
  ParseUUIDPipe,
  Logger,
  ConflictException,
  NotFoundException,
  BadRequestException,
  UploadedFile,
  UseInterceptors,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';

import { OrderService } from './order.service';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
import { ChangeSeatsDto } from './dto/change-seats.dto';
import { ExportOrdersDto } from './dto/export-orders.dto';
import { ImportOrdersDto } from './dto/import-orders.dto';
import { error, success } from '../common/responses';
import {
  ApiTags,
  ApiBearerAuth,
  ApiOperation,
  ApiResponse,
  ApiQuery,
  ApiConsumes,
} from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { UserRole } from '../common/enums';
import { AuthenticatedRequest } from '../common/interfaces/auth.interface';
import { OrderData } from './mappers/order-data.mapper';
import { EnhancedOrderService } from '../common/services/enhanced-order.service';
import { ConcurrencyService } from '../common/services/concurrency.service';
import { OrderUpdatesGateway } from '../common/gateways/order-updates.gateway';
import { OrderControllerHelper } from './utils/controller.helper';

@ApiTags('Orders')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard, RolesGuard)
@Controller('orders')
export class OrderController {
  private readonly logger = new Logger(OrderController.name);

  constructor(
    private readonly orderService: OrderService,
    private readonly enhancedOrderService: EnhancedOrderService,
    private readonly concurrencyService: ConcurrencyService,
    private readonly orderUpdatesGateway: OrderUpdatesGateway,
  ) {}

  /**
   * üé´ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
   * ‡πÉ‡∏ä‡πâ EnhancedOrderService ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition ‡πÅ‡∏•‡∏∞ duplicate orders
   */
  @Post()
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà' })
  @ApiResponse({ status: 201, description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
  @ApiResponse({ status: 403, description: '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á' })
  @ApiResponse({
    status: 409,
    description: '‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
  })
  @ApiResponse({ status: 429, description: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ' })
  async createOrder(
    @Body() dto: CreateOrderDto,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° createdBy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
      dto.createdBy = req.user.id;

      // ‡πÉ‡∏ä‡πâ EnhancedOrderService ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency ‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥
      const data =
        await this.enhancedOrderService.createOrderWithConcurrencyControl(
          req.user.id,
          dto,
        );

      return success(data, '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error types ‡∏ï‡πà‡∏≤‡∏á‡πÜ
      if (
        err.message &&
        (err.message.includes('duplicate') || err.message.includes('DUPLICATE'))
      ) {
        throw new ConflictException(err.message);
      }
      if (
        err.message &&
        (err.message.includes('rate limit') ||
          err.message.includes('RATE_LIMIT'))
      ) {
        throw new BadRequestException(err.message);
      }
      throw new BadRequestException(err.message);
    }
  }

  /**
   * üßë‚Äçüíº ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ staff/admin/master ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (option dropdown)
   */
  @Get('master/staff-admin')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({
    summary: '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ staff/admin/master ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (option dropdown)',
  })
  @ApiResponse({ status: 200, description: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async getOrderCreators(@Req() req: AuthenticatedRequest) {
    const orders = await this.orderService.findAll({ limit: 10000 }, undefined);
    const creatorMap = new Map();
    if (orders && Array.isArray(orders.items)) {
      for (const order of orders.items) {
        if (order.createdById && order.createdByName) {
          creatorMap.set(order.createdById, order.createdByName);
        }
      }
    }
    const creators = [
      { value: '', label: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' },
      ...Array.from(creatorMap.entries()).map(([id, name]) => {
        return {
          value: id,
          label: name,
        };
      }),
    ];
    return success(creators, '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ staff/admin/master ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
  }

  /**
   * üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  @Get()
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiQuery({ name: 'page', required: false, type: Number })
  @ApiQuery({ name: 'limit', required: false, type: Number })
  @ApiQuery({
    name: 'status',
    required: false,
    enum: ['PENDING', 'CONFIRMED', 'CANCELLED'],
  })
  @ApiQuery({ name: 'search', required: false, type: String })
  @ApiQuery({ name: 'referrerName', required: false, type: String })
  @ApiQuery({
    name: 'createdBy',
    required: false,
    type: String,
    description: '‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (userId staff/admin)',
  })
  @ApiQuery({
    name: 'purchaseType',
    required: false,
    enum: ['WEBSITE', 'BOOKING', 'ONSITE'],
    description: '‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠',
  })
  @ApiQuery({
    name: 'attendanceStatus',
    required: false,
    enum: ['PENDING', 'CHECKED_IN', 'NO_SHOW'],
    description: '‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô',
  })
  @ApiQuery({ name: 'referrerName', required: false, type: String })
  async findAll(
    @Req() req: AuthenticatedRequest,
    @Query('page') page: number = 1,
    @Query('limit') limit: number = 10,
    @Query('status') status?: string,
    @Query('search') search?: string,
    @Query('createdBy') createdBy?: string,
    @Query('showDate') showDate?: string,
    @Query('paymentMethod') paymentMethod?: string,
    @Query('purchaseType') purchaseType?: string,
    @Query('attendanceStatus') attendanceStatus?: string,
    @Query('referrerName') referrerName?: string,
  ) {
    const result = await this.orderService.findAll(
      {
        page,
        limit,
        status,
        search,
        createdBy,
        showDate,
        paymentMethod,
        purchaseType,
        attendanceStatus,
        referrerName,
      },
      req.user.id,
    );

    return OrderControllerHelper.createPaginationResponse(
      result,
      '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      req,
    );
  }

  /**
   * üîç ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Get(':id')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  async findById(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    const data = await this.orderService.findById(id, req.user.id);
    return OrderControllerHelper.createSuccessResponse(
      data,
      '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      req,
    );
  }

  /**
   * ‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Patch(':id')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  async update(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() dto: UpdateOrderDto,
    @Req() req: AuthenticatedRequest,
  ) {
    const updates: Partial<OrderData> = {
      ...dto,
      showDate: dto.showDate ? dto.showDate : undefined,
      expiresAt: dto.expiresAt ? new Date(dto.expiresAt) : undefined,
    };

    const data = await this.orderService.update(id, updates, req.user.id);
    return OrderControllerHelper.createSuccessResponse(
      data,
      '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      req,
    );
  }

  /**
   * ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Patch(':id/cancel')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 409, description: '‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß' })
  async cancel(@Param('id', ParseUUIDPipe) id: string) {
    const result =
      await this.enhancedOrderService.cancelOrderWithConcurrencyControl(
        id,
        undefined,
      );

    if (!result?.success) {
      const message = result?.message || 'Order not found';
      if (message.includes('not found') || message.includes('‡πÑ‡∏°‡πà‡∏û‡∏ö')) {
        throw new NotFoundException(message);
      }
      if (
        message.includes('already cancelled') ||
        message.includes('cancelled')
      ) {
        throw new ConflictException(message);
      }
      throw new NotFoundException('Order not found');
    }

    const orderObj =
      (result as any).data || (result as any).updatedOrder || result;
    const orderId = orderObj?.id;
    const orderStatus = orderObj?.status;

    if (!orderId || !orderStatus?.toUpperCase().startsWith('CANCEL')) {
      throw new NotFoundException('Order not found');
    }

    return { id: orderId };
  }

  /**
   * ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
   */
  @Patch(':id/confirm-payment')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô' })
  @ApiResponse({ status: 200, description: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ' })
  async confirmPayment(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const result = await this.orderService.confirmPayment(id, req.user.id);
      return success(result, '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üéüÔ∏è ‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß
   */
  @Get(':id/tickets')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß' })
  @ApiResponse({ status: 200, description: '‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡πÑ‡∏î‡πâ' })
  async generateTickets(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const tickets = await this.orderService.generateTickets(id, req.user.id);
      return success(tickets, '‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á / ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Patch(':id/change-seats')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ' })
  async changeSeats(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() changeSeatsDto: ChangeSeatsDto,
    @Req() req: AuthenticatedRequest,
  ) {
    const result = await this.orderService.changeSeats(
      id,
      changeSeatsDto,
      req.user.id,
    );

    if (!result?.success) {
      throw new BadRequestException(result?.message || '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ updatedOrder ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!result.updatedOrder?.id) {
      throw new BadRequestException(
        '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó',
      );
    }

    return success(result, result.message || '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
  }

  /**
   * üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Get('stats/overview')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async getStats(@Req() req: AuthenticatedRequest) {
    try {
      const stats = await this.orderService.getOrderStats();
      return success(stats, '‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üóëÔ∏è ‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
   */
  @Delete(':id')
  @Roles(UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  async remove(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const data = await this.orderService.remove(id, req.user.id);
      return success(data, '‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      if (err.status === 404 || err.name === 'NotFoundException') throw err;
      return error(err.message, '400', req);
    }
  }

  /**
   * üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Standing
   */
  @Patch(':id/update-standing-order')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó TicketType.STANDING' })
  @ApiResponse({ status: 200, description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  async updateStandingOrder(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() dto: UpdateOrderDto,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const updates: Partial<OrderData> = {
        ...dto,
        showDate: dto.showDate ? dto.showDate : undefined,
        expiresAt: dto.expiresAt ? new Date(dto.expiresAt) : undefined,
      };

      const data = await this.orderService.updateStandingOrder(
        id,
        updates,
        req.user.id,
      );
      return success(data, '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  // =============================================
  // üõ°Ô∏è ENHANCED CONCURRENCY CONTROL ENDPOINTS
  // =============================================

  /**
   * üîí ‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
   */
  @Post('seats/lock')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß' })
  @ApiResponse({ status: 201, description: '‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 409, description: '‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß' })
  async lockSeats(
    @Body() dto: { seatIds: string[]; showDate: string },
    @Req() req: AuthenticatedRequest,
  ) {
    const result = await this.concurrencyService.lockSeatsForOrder(
      dto.seatIds,
      dto.showDate,
      5, // 5 minutes lock
    );

    this.orderUpdatesGateway.notifySeatLocked({
      seatIds: dto.seatIds,
      showDate: dto.showDate,
      userId: req.user.id,
      message: '‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    });

    return success(result, '‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
  }

  /**
   * üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
   */
  @Post('seats/unlock')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß' })
  @ApiResponse({ status: 200, description: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async unlockSeats(
    @Body() dto: { seatIds: string[]; showDate: string },
    @Req() req: AuthenticatedRequest,
  ) {
    const result = await this.concurrencyService.releaseSeatLocks(dto.seatIds);

    this.orderUpdatesGateway.notifySeatUnlocked({
      seatIds: dto.seatIds,
      showDate: dto.showDate,
      userId: req.user.id,
      message: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    });

    return success(result, '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
  }

  /**
   * üíì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
   */
  @Get('system/health')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö' })
  @ApiResponse({ status: 200, description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö' })
  async getSystemHealth(@Req() req: AuthenticatedRequest) {
    const health = await this.enhancedOrderService.getSystemHealth();
    return success(health, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö', req);
  }

  /**
   * üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
   */
  @Post('system/cleanup')
  @Roles(UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' })
  @ApiResponse({ status: 200, description: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async cleanupExpiredLocks(@Req() req: AuthenticatedRequest) {
    await this.concurrencyService.cleanupExpiredSeatLocks();
    return success(
      { message: '‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' },
      '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      req,
    );
  }

  /**
   * üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö Enhanced
   */
  @Get('system/stats')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Enhanced Order System' })
  @ApiResponse({ status: 200, description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö' })
  async getEnhancedSystemStats(@Req() req: AuthenticatedRequest) {
    const basicStats = {
      timestamp: new Date().toISOString(),
      systemStatus: 'Enhanced Order System Active',
      features: [
        'Concurrency Control',
        'Duplicate Prevention',
        'Seat Locking',
        'Atomic Transactions',
      ],
    };

    return success(basicStats, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö Enhanced', req);
  }

  /**
   * üìÑ Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô Excel/CSV
   */
  @Get('export/excel')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: 'Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel/CSV' })
  @ApiQuery({
    name: 'status',
    required: false,
    enum: ['PENDING', 'CONFIRMED', 'CANCELLED'],
  })
  @ApiQuery({ name: 'search', required: false, type: String })
  @ApiQuery({ name: 'referrerName', required: false, type: String })
  @ApiQuery({ name: 'createdBy', required: false, type: String })
  @ApiQuery({ name: 'showDate', required: false, type: String })
  @ApiQuery({ name: 'paymentMethod', required: false, type: String })
  @ApiQuery({
    name: 'purchaseType',
    required: false,
    enum: ['WEBSITE', 'BOOKING', 'ONSITE'],
  })
  @ApiQuery({
    name: 'attendanceStatus',
    required: false,
    enum: ['PENDING', 'CHECKED_IN', 'NO_SHOW'],
  })
  @ApiQuery({
    name: 'includeAllPages',
    required: false,
    type: Boolean,
    description: '‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤',
  })
  @ApiQuery({
    name: 'format',
    required: false,
    enum: ['csv', 'excel'],
    description: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
  })
  @ApiResponse({ status: 200, description: 'Export ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async exportOrders(
    @Req() req: AuthenticatedRequest,
    @Res() res: any,
    @Query('status') status?: string,
    @Query('search') search?: string,
    @Query('createdBy') createdBy?: string,
    @Query('showDate') showDate?: string,
    @Query('paymentMethod') paymentMethod?: string,
    @Query('purchaseType') purchaseType?: string,
    @Query('attendanceStatus') attendanceStatus?: string,
    @Query('includeAllPages') includeAllPages: boolean = true,
    @Query('referrerName') referrerName?: string,
    @Query('format') format: 'csv' | 'excel' = 'csv',
  ) {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° filter (‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
    const exportData = await this.orderService.exportOrdersData({
      status,
      search,
      createdBy,
      showDate,
      paymentMethod,
      purchaseType,
      attendanceStatus,
      includeAllPages,
      referrerName,
    });

    const timestamp = new Date().toISOString().split('T')[0];

    if (format === 'excel') {
      const excelBuffer =
        await this.orderService.generateOrdersExcel(exportData);

      res.set({
        'Content-Type':
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename="orders-export-${timestamp}.xlsx"`,
        'Content-Length': excelBuffer.length,
      });

      res.send(excelBuffer);
    } else {
      const csvContent = await this.orderService.generateOrdersCSV(exportData);

      res.set({
        'Content-Type': 'text/csv; charset=utf-8',
        'Content-Disposition': `attachment; filename="orders-export-${timestamp}.csv"`,
        'Content-Length': Buffer.byteLength(csvContent, 'utf8'),
      });

      res.send(csvContent);
    }
  }

  /**
   * üìÑ Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô PDF
   */
  @Get('export/pdf')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: 'Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF' })
  @ApiQuery({
    name: 'status',
    required: false,
    enum: ['PENDING', 'CONFIRMED', 'CANCELLED'],
  })
  @ApiQuery({ name: 'search', required: false, type: String })
  @ApiQuery({ name: 'referrerName', required: false, type: String })
  @ApiQuery({ name: 'createdBy', required: false, type: String })
  @ApiQuery({ name: 'showDate', required: false, type: String })
  @ApiQuery({ name: 'paymentMethod', required: false, type: String })
  @ApiQuery({
    name: 'purchaseType',
    required: false,
    enum: ['WEBSITE', 'BOOKING', 'ONSITE'],
  })
  @ApiQuery({
    name: 'attendanceStatus',
    required: false,
    enum: ['PENDING', 'CHECKED_IN', 'NO_SHOW'],
  })
  @ApiQuery({
    name: 'includeAllPages',
    required: false,
    type: Boolean,
    description: '‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤',
  })
  @ApiResponse({ status: 200, description: 'Export PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async exportOrdersPdf(
    @Req() req: AuthenticatedRequest,
    @Res() res: any,
    @Query('status') status?: string,
    @Query('search') search?: string,
    @Query('createdBy') createdBy?: string,
    @Query('showDate') showDate?: string,
    @Query('paymentMethod') paymentMethod?: string,
    @Query('purchaseType') purchaseType?: string,
    @Query('attendanceStatus') attendanceStatus?: string,
    @Query('includeAllPages') includeAllPages: boolean = true,
    @Query('referrerName') referrerName?: string,
  ) {
    const exportData = await this.orderService.exportOrdersData({
      status,
      search,
      createdBy,
      showDate,
      paymentMethod,
      purchaseType,
      attendanceStatus,
      includeAllPages,
      referrerName,
    });

    const pdfBuffer = await this.orderService.generateOrdersPDF(exportData);

    res.set({
      'Content-Type': 'application/pdf',
      'Content-Disposition': 'inline; filename="orders-export.pdf"',
      'Content-Length': pdfBuffer.length,
    });

    res.send(pdfBuffer);
  }

  // ========================================
  // üì§ EXPORT/IMPORT ENDPOINTS
  // ========================================

  @Post('export-spreadsheet')
  @Roles(UserRole.ADMIN, UserRole.MANAGER, UserRole.STAFF)
  @ApiOperation({
    summary: 'Export orders to spreadsheet format (Excel/CSV)',
    description: 'Export selected orders by IDs to CSV or Excel format',
  })
  @ApiResponse({
    status: 200,
    description: 'Orders exported successfully',
    schema: { type: 'string', format: 'binary' },
  })
  async exportOrdersToSpreadsheet(
    @Body() exportOrdersDto: ExportOrdersDto,
    @Req() req: AuthenticatedRequest,
    @Res() res: any,
  ) {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
    const exportData = await this.orderService.exportOrdersData({
      includeAllPages: true,
    });

    // ‡πÅ‡∏õ‡∏•‡∏á orderIds ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object
    let orderIds: string[] = [];

    if (exportOrdersDto.orderIds) {
      if (Array.isArray(exportOrdersDto.orderIds)) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        orderIds = exportOrdersDto.orderIds;
      } else if (typeof exportOrdersDto.orderIds === 'object') {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á IDs
        const values = Object.values(exportOrdersDto.orderIds as any);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ value ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠ object
        orderIds = values
          .map((value: any) => {
            if (typeof value === 'string') {
              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢ (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
              return value;
            } else if (typeof value === 'object' && value.id) {
              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ property id (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
              return value.id;
            }
            return null;
          })
          .filter((id) => id); // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ id
      }
    }

    console.log('üìã Processed orderIds:', orderIds);

    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ IDs)
    if (orderIds && orderIds.length > 0) {
      const beforeFilter = exportData.orders.length;
      exportData.orders = exportData.orders.filter((order) =>
        orderIds.includes(order.id),
      );
      console.log(
        `üîÑ Filtered from ${beforeFilter} to ${exportData.orders.length} orders`,
      );

      // Debug: ‡πÅ‡∏™‡∏î‡∏á IDs ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏à‡∏£‡∏¥‡∏á
      const foundIds = exportData.orders.map((order) => order.id);
      console.log('‚úÖ Found order IDs:', foundIds);

      const notFoundIds = orderIds.filter((id) => !foundIds.includes(id));
      if (notFoundIds.length > 0) {
        console.log('‚ùå Not found order IDs:', notFoundIds);
      }
    }

    const timestamp = new Date().toISOString().split('T')[0];
    const format = exportOrdersDto.format || 'csv';

    console.log(`üìä Export format: ${format}`);
    console.log(`üìä Orders to export: ${exportData.orders.length}`);
    if (format === 'excel') {
      try {
        console.log('üîÑ Generating Excel file...');
        const excelBuffer =
          await this.orderService.generateOrdersExcel(exportData);
        console.log(
          '‚úÖ Excel file generated successfully, size:',
          excelBuffer.length,
        );

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ buffer ‡πÄ‡∏õ‡πá‡∏ô Excel ‡∏à‡∏£‡∏¥‡∏á
        if (!Buffer.isBuffer(excelBuffer) || excelBuffer.length < 1000) {
          throw new Error('Invalid Excel buffer generated');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö magic bytes ‡∏Ç‡∏≠‡∏á Excel file
        const magicBytes = excelBuffer.slice(0, 4);
        const isValidExcel = magicBytes.equals(
          Buffer.from([0x50, 0x4b, 0x03, 0x04]),
        ); // ZIP signature (Excel is ZIP-based)

        if (!isValidExcel) {
          console.error('‚ùå Generated file is not a valid Excel format');
          throw new Error('Generated file is not Excel format');
        }

        console.log('üîç Excel validation passed - sending Excel file');

        res.set({
          'Content-Type':
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          'Content-Disposition': `attachment; filename="orders-export-${timestamp}.xlsx"`,
          'Content-Length': excelBuffer.length.toString(),
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          Pragma: 'no-cache',
          Expires: '0',
          'Access-Control-Expose-Headers': 'Content-Disposition',
        });

        return res.end(excelBuffer, 'binary');
      } catch (error) {
        console.error('‚ùå Excel generation failed:', error);
        throw new BadRequestException(
          `Excel generation failed: ${error.message}`,
        );
      }
    } else {
      try {
        console.log('üîÑ Generating CSV file...');
        const csvContent =
          await this.orderService.generateOrdersCSV(exportData);
        console.log(
          '‚úÖ CSV file generated successfully, length:',
          csvContent.length,
        );

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° BOM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UTF-8 encoding ‡πÉ‡∏ô CSV
        const csvWithBOM = '\uFEFF' + csvContent;

        res.set({
          'Content-Type': 'text/csv; charset=utf-8',
          'Content-Disposition': `attachment; filename="orders-export-${timestamp}.csv"`,
          'Content-Length': Buffer.byteLength(csvWithBOM, 'utf8'),
        });

        res.send(csvWithBOM);
      } catch (error) {
        console.error('‚ùå CSV generation failed:', error);
        throw new BadRequestException(
          `CSV generation failed: ${error.message}`,
        );
      }
    }
  }

  @Post('import-spreadsheet')
  @Roles(UserRole.ADMIN, UserRole.MANAGER)
  @ApiOperation({
    summary: 'Import and update orders from spreadsheet data',
    description: 'Import spreadsheet data and update orders',
  })
  @ApiResponse({
    status: 200,
    description: 'Orders imported and updated successfully',
  })
  async importOrdersFromSpreadsheet(
    @Body() importOrdersDto: ImportOrdersDto,
    @Req() req: AuthenticatedRequest,
  ) {
    const result = await this.orderService.importAndUpdateOrders(
      importOrdersDto.importData,
      req.user.id,
    );

    return success(result, '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', req);
  }

  /**
   * üì§ Import ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV/Excel
   */
  @Post('import-file')
  @Roles(UserRole.ADMIN, UserRole.MANAGER, UserRole.STAFF)
  @ApiOperation({
    summary: 'Import orders from CSV/Excel file',
    description: 'Upload and import orders from CSV or Excel file',
  })
  @ApiConsumes('multipart/form-data')
  @ApiResponse({ status: 200, description: 'Import ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' })
  @UseInterceptors(FileInterceptor('file'))
  async importOrdersFromFile(
    @UploadedFile() file: Express.Multer.File,
    @Req() req: AuthenticatedRequest,
  ) {
    if (!file) {
      throw new BadRequestException('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import');
    }

    const allowedTypes = [
      'text/csv',
      'application/vnd.ms-excel',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'application/csv',
    ];

    if (!allowedTypes.includes(file.mimetype)) {
      throw new BadRequestException(
        '‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó CSV ‡∏´‡∏£‡∏∑‡∏≠ Excel (.csv, .xls, .xlsx)',
      );
    }

    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
    if (file.size > 50 * 1024 * 1024) {
      throw new BadRequestException('‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50MB');
    }

    this.logger.log(
      `üì§ Starting import: ${file.originalname} (${file.size} bytes)`,
    );

    const result = await this.orderService.importOrdersFromFileBuffer(
      file.buffer,
      file.mimetype,
      file.originalname,
      req.user.id,
    );

    this.logger.log('‚úÖ Import completed successfully');

    return success(result, '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
  }

  // =============================================
  // üöÄ FUTURE: BATCH PROCESSING (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ implement)
  // =============================================
  // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏° batch processing ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
}
