import {
  Controller,
  Post,
  Get,
  Param,
  Patch,
  Delete,
  Body,
  Req,
  Res,
  UseGuards,
  Query,
  ParseUUIDPipe,
  Logger,
  ConflictException,
  NotFoundException,
  BadRequestException,
} from '@nestjs/common';

import { OrderService } from './order.service';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
import { ChangeSeatsDto } from './dto/change-seats.dto';
import { error, success } from '../common/responses';
import { ApiResponseHelper } from '../common/utils';
import {
  ApiTags,
  ApiBearerAuth,
  ApiOperation,
  ApiResponse,
  ApiQuery,
} from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { UserRole } from '../common/enums';
import { AuthenticatedRequest } from '../common/interfaces/auth.interface';
import { OrderData } from '../common/interfaces';
import { EnhancedOrderService } from '../common/services/enhanced-order.service';
import { ConcurrencyService } from '../common/services/concurrency.service';
import { DuplicateOrderPreventionService } from '../common/services/duplicate-order-prevention.service';
import { OrderUpdatesGateway } from '../common/gateways/order-updates.gateway';

@ApiTags('Orders')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard, RolesGuard)
@Controller('orders')
export class OrderController {
  private readonly logger = new Logger(OrderController.name);

  constructor(
    private readonly orderService: OrderService,
    private readonly enhancedOrderService: EnhancedOrderService,
    private readonly concurrencyService: ConcurrencyService,
    private readonly duplicatePreventionService: DuplicateOrderPreventionService,
    private readonly orderUpdatesGateway: OrderUpdatesGateway, // Inject the WebSocket gateway
  ) {}

  /**
   * üé´ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà (Enhanced with Concurrency Protection)
   */
  @Post()
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition)' })
  @ApiResponse({ status: 201, description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' })
  @ApiResponse({ status: 403, description: '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á' })
  @ApiResponse({
    status: 409,
    description: '‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
  })
  @ApiResponse({ status: 429, description: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ' })
  async createOrder(
    @Body() dto: CreateOrderDto,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ONSITE ‡πÉ‡∏´‡πâ validate ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ quantity, ticketType, showDate
      // if (dto.purchaseType === OrderPurchaseType.ONSITE) {
      //   if (!dto.quantity || !dto.ticketType || !dto.showDate) {
      //     throw new BadRequestException(
      //       'ONSITE ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡πã‡∏ß, ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó, ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á',
      //     );
      //   }
      //   // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ONSITE
      //   dto.customerName = undefined;
      //   dto.customerPhone = undefined;
      //   dto.customerEmail = undefined;
      // } else {
      //   // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ validate ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
      //   if (
      //     !dto.customerName ||
      //     !dto.customerPhone ||
      //     !dto.showDate ||
      //     !dto.ticketType ||
      //     !dto.quantity
      //   ) {
      //     throw new BadRequestException('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      //   }
      // }
      dto.createdBy = req.user.id;
      const data =
        await this.enhancedOrderService.createOrderWithConcurrencyControl(
          req.user.id,
          dto,
        );
      return success(data, '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition)', req);
    } catch (err) {
      // Handle specific concurrency errors
      if (
        err.message &&
        (err.message.includes('duplicate') || err.message.includes('DUPLICATE'))
      ) {
        throw new ConflictException(err.message);
      }
      if (
        err.message &&
        (err.message.includes('rate limit') ||
          err.message.includes('RATE_LIMIT'))
      ) {
        throw new BadRequestException(err.message);
      }
      throw new BadRequestException(err.message);
    }
  }

  /**
   * üßë‚Äçüíº ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ staff/admin/master ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (option dropdown)
   */
  @Get('master/staff-admin')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({
    summary: '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ staff/admin/master ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (option dropdown)',
  })
  @ApiResponse({ status: 200, description: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async getOrderCreators(@Req() req: AuthenticatedRequest) {
    const orders = await this.orderService.findAll({ limit: 10000 }, undefined);
    const creatorMap = new Map();
    if (orders && Array.isArray(orders.items)) {
      for (const order of orders.items) {
        if (order.createdById && order.createdByName) {
          creatorMap.set(order.createdById, order.createdByName);
        }
      }
    }
    const creators = [
      { value: '', label: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' },
      ...Array.from(creatorMap.entries()).map(([id, name]) => {
        return {
          value: id,
          label: name,
        };
      }),
    ];
    return success(creators, '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ staff/admin/master ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
  }

  /**
   * üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  @Get()
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiQuery({ name: 'page', required: false, type: Number })
  @ApiQuery({ name: 'limit', required: false, type: Number })
  @ApiQuery({
    name: 'status',
    required: false,
    enum: ['PENDING', 'CONFIRMED', 'CANCELLED'],
  })
  @ApiQuery({ name: 'search', required: false, type: String })
  @ApiQuery({ name: 'referrerName', required: false, type: String })
  @ApiQuery({
    name: 'createdBy',
    required: false,
    type: String,
    description: '‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (userId staff/admin)',
  })
  @ApiQuery({
    name: 'purchaseType',
    required: false,
    enum: ['WEBSITE', 'BOOKING', 'ONSITE'],
    description: '‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠',
  })
  @ApiQuery({
    name: 'attendanceStatus',
    required: false,
    enum: ['PENDING', 'CHECKED_IN', 'NO_SHOW'],
    description: '‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô',
  })
  @ApiQuery({ name: 'referrerName', required: false, type: String })
  async findAll(
    @Req() req: AuthenticatedRequest,
    @Query('page') page: number = 1,
    @Query('limit') limit: number = 10,
    @Query('status') status?: string,
    @Query('search') search?: string,
    @Query('createdBy') createdBy?: string,
    @Query('showDate') showDate?: string,
    @Query('paymentMethod') paymentMethod?: string,
    @Query('purchaseType') purchaseType?: string,
    @Query('attendanceStatus') attendanceStatus?: string,
    @Query('referrerName') referrerName?: string,
  ) {
    try {
      const result = await this.orderService.findAll(
        {
          page,
          limit,
          status,
          search,
          createdBy,
          showDate,
          paymentMethod,
          purchaseType,
          attendanceStatus,
          referrerName,
        },
        req.user.id,
      );

      return success(
        {
          data: Array.isArray(result.items) ? result.items : [],
          total: result.total,
          page: result.page,
          limit: result.limit,
        },
        '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        req,
      );
    } catch (err) {
      return ApiResponseHelper.error(
        err.message,
        err.status || 400,
        'ORD_FIND_ALL_ERROR',
      );
    }
  }

  /**
   * üîç ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Get(':id')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  async findById(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const data = await this.orderService.findById(id, req.user.id);
      return success(data, '‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      if (err.status === 404 || err.name === 'NotFoundException') throw err;
      return error(err.message, '400', req);
    }
  }

  /**
   * ‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Patch(':id')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  async update(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() dto: UpdateOrderDto,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const updates: Partial<OrderData> = {
        ...dto,
        showDate: dto.showDate ? dto.showDate : undefined,
        expiresAt: dto.expiresAt ? new Date(dto.expiresAt) : undefined,
      };

      const data = await this.orderService.update(id, updates, req.user.id);
      return success(data, '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (Enhanced with Concurrency Protection)
   */
  @Patch(':id/cancel')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition)' })
  @ApiResponse({ status: 200, description: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ' })
  @ApiResponse({ status: 409, description: '‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß' })
  async cancel(@Param('id', ParseUUIDPipe) id: string) {
    try {
      this.logger.log(`üõ°Ô∏è Enhanced cancel request for order: ${id}`);
      // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ req ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á userId ‡πÄ‡∏õ‡πá‡∏ô undefined
      const result =
        await this.enhancedOrderService.cancelOrderWithConcurrencyControl(
          id,
          undefined,
        );
      this.logger.log(`‚úÖ Enhanced cancel successful for order: ${id}`);
      // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ result.success === true ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (
        !result ||
        typeof result.success !== 'boolean' ||
        result.success !== true
      ) {
        if (
          result &&
          result.message &&
          (result.message.includes('not found') ||
            result.message.includes('‡πÑ‡∏°‡πà‡∏û‡∏ö'))
        ) {
          throw new NotFoundException(result.message || 'Order not found');
        }
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ message ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á conflict ‡πÉ‡∏´‡πâ throw 409
        if (
          result &&
          result.message &&
          (result.message.includes('already cancelled') ||
            result.message.includes('already processed') ||
            result.message.includes('‡∏ã‡πâ‡∏≥') ||
            result.message.includes('cancelled'))
        ) {
          throw new ConflictException(result.message);
        }
        throw new NotFoundException('Order not found');
      }
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° robust check: ‡∏ñ‡πâ‡∏≤ success === true ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ id ‡∏´‡∏£‡∏∑‡∏≠ status !== 'CANCELLED' ‡πÉ‡∏´‡πâ throw 404
      let orderId: string | undefined = undefined;
      let orderStatus: string | undefined = undefined;
      // Helper: get nested order object
      const getOrderObj = (res: any) => {
        if (res && typeof res === 'object') {
          if (res.data && typeof res.data === 'object') return res.data;
          if (res.updatedOrder && typeof res.updatedOrder === 'object')
            return res.updatedOrder;
        }
        return res;
      };
      const orderObj = getOrderObj(result);
      if (orderObj) {
        orderId = orderObj.id;
        orderStatus = orderObj.status;
      }
      // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'CANCEL' (case-insensitive)
      if (
        !orderId ||
        !orderStatus ||
        typeof orderStatus !== 'string' ||
        !orderStatus.toUpperCase().startsWith('CANCEL')
      ) {
        throw new NotFoundException('Order not found');
      }
      // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ id ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      return { id: orderId };
    } catch (err) {
      this.logger.error(`‚ùå Error cancelling order: ${id}`, err.stack);
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô HttpException ‡πÉ‡∏´‡πâ throw ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ NestJS ‡∏ï‡∏≠‡∏ö status code ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (err instanceof ConflictException || err instanceof NotFoundException)
        throw err;
      // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ legacy ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ err.status/err.name
      if (err.status === 409 || err.name === 'ConflictException')
        throw new ConflictException(err.message);
      if (err.status === 404 || err.name === 'NotFoundException')
        throw new NotFoundException(err.message);
      // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ req ‡πÉ‡∏ô error response ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      return { message: err.message, error: 'Cancel Error', statusCode: 400 };
    }
  }

  /**
   * ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
   */
  @Patch(':id/confirm-payment')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô' })
  @ApiResponse({ status: 200, description: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ' })
  async confirmPayment(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const result = await this.orderService.confirmPayment(id, req.user.id);
      return success(result, '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üéüÔ∏è ‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß
   */
  @Get(':id/tickets')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß' })
  @ApiResponse({ status: 200, description: '‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡πÑ‡∏î‡πâ' })
  async generateTickets(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      console.log('id', id, req.user.id);

      const tickets = await this.orderService.generateTickets(id, req.user.id);
      return success(tickets, '‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
   */
  @Patch(':id/change-seats')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á' })
  @ApiResponse({ status: 200, description: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 400, description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ' })
  async changeSeats(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() changeSeatsDto: ChangeSeatsDto,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      // ‡∏ñ‡πâ‡∏≤ seatIds ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ throw BadRequestException
      if (
        !Array.isArray(changeSeatsDto.seatIds) ||
        changeSeatsDto.seatIds.length === 0
      ) {
        throw new BadRequestException('seatIds must not be empty');
      }
      const result = await this.orderService.changeSeats(
        id,
        changeSeatsDto.seatIds, // These are now seat numbers, not IDs
        req.user.id,
        changeSeatsDto.newReferrerCode,
        changeSeatsDto.newCustomerName,
        changeSeatsDto.newCustomerPhone,
        changeSeatsDto.newCustomerEmail,
        changeSeatsDto.newShowDate,
      );
      // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ result.success === true ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (
        !result ||
        typeof result.success !== 'boolean' ||
        result.success !== true
      ) {
        throw new BadRequestException(
          result && result.message ? result.message : 'Change seats failed',
        );
      }
      // robust: ‡∏ñ‡πâ‡∏≤ success === true ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ seatBookings/seats ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô array ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ throw 400
      if (result.success === true) {
        // Helper: get nested order object
        const getOrderObj = (res: any) => {
          if (res && typeof res === 'object') {
            if (res.updatedOrder && typeof res.updatedOrder === 'object') {
              return res.updatedOrder;
            }
            if (res.data && typeof res.data === 'object') {
              return res.data;
            }
          }
          return res;
        };
        const orderObj = getOrderObj(result);
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö id ‡πÅ‡∏•‡∏∞ array ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á (seatIds, seatBookings, seats)
        const hasValidSeats =
          (Array.isArray(orderObj?.seatIds) && orderObj.seatIds.length > 0) ||
          (Array.isArray(orderObj?.seatBookings) &&
            orderObj.seatBookings.length > 0) ||
          (Array.isArray(orderObj?.seats) && orderObj.seats.length > 0);
        if (!orderObj?.id || !hasValidSeats) {
          throw new BadRequestException('Change seats failed: invalid result');
        }
      }
      return success(result, '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô HttpException ‡πÉ‡∏´‡πâ throw ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ NestJS ‡∏ï‡∏≠‡∏ö status code ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (err instanceof BadRequestException) {
        throw err;
      }
      if (err.status === 400 || err.name === 'BadRequestException') {
        throw new BadRequestException(err.message);
      }
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà BadRequestException ‡πÉ‡∏´‡πâ throw 500
      throw err;
    }
  }

  /**
   * üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   */
  @Get('stats/overview')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async getStats(@Req() req: AuthenticatedRequest) {
    try {
      const stats = await this.orderService.getOrderStats();
      return success(stats, '‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üóëÔ∏è ‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
   */
  @Delete(':id')
  @Roles(UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  @ApiResponse({ status: 200, description: '‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  async remove(
    @Param('id', ParseUUIDPipe) id: string,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const data = await this.orderService.remove(id, req.user.id);
      return success(data, '‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      if (err.status === 404 || err.name === 'NotFoundException') throw err;
      return error(err.message, '400', req);
    }
  }

  /**
   * üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Standing
   */
  @Patch(':id/update-standing-order')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó TicketType.STANDING' })
  @ApiResponse({ status: 200, description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 404, description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' })
  async updateStandingOrder(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() dto: UpdateOrderDto,
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      const updates: Partial<OrderData> = {
        ...dto,
        showDate: dto.showDate ? dto.showDate : undefined,
        expiresAt: dto.expiresAt ? new Date(dto.expiresAt) : undefined,
      };

      const data = await this.orderService.updateStandingOrder(
        id,
        updates,
        req.user.id,
      );
      return success(data, '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  // =============================================
  // üõ°Ô∏è ENHANCED CONCURRENCY CONTROL ENDPOINTS
  // =============================================

  /**
   * üîí ‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö frontend)
   */
  @Post('seats/lock')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition)' })
  @ApiResponse({ status: 201, description: '‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 409, description: '‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß' })
  async lockSeats(
    @Body() dto: { seatIds: string[]; showDate: string },
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      this.logger.log(`üîí Locking seats for user: ${req.user.id}`, dto);

      const result = await this.concurrencyService.lockSeatsForOrder(
        dto.seatIds,
        dto.showDate,
        5, // 5 minutes lock
      );

      // ‚úÖ Send real-time notification to frontend
      this.orderUpdatesGateway.notifySeatLocked({
        seatIds: dto.seatIds,
        showDate: dto.showDate,
        userId: req.user.id,
        message: '‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      });

      this.logger.log(`‚úÖ Seats locked successfully for user: ${req.user.id}`);
      return success(result, '‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      this.logger.error(
        `‚ùå Error locking seats for user: ${req.user.id}`,
        err.stack,
      );

      if (
        err.message.includes('already locked') ||
        err.message.includes('CONFLICT')
      ) {
        return error(err.message, '409', req);
      }

      return error(err.message, '400', req);
    }
  }

  /**
   * üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
   */
  @Post('seats/unlock')
  @Roles(UserRole.USER, UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß' })
  @ApiResponse({ status: 200, description: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async unlockSeats(
    @Body() dto: { seatIds: string[]; showDate: string },
    @Req() req: AuthenticatedRequest,
  ) {
    try {
      this.logger.log(`üîì Unlocking seats for user: ${req.user.id}`, dto);

      const result = await this.concurrencyService.releaseSeatLocks(
        dto.seatIds,
      );

      // ‚úÖ Send real-time notification to frontend
      this.orderUpdatesGateway.notifySeatUnlocked({
        seatIds: dto.seatIds,
        showDate: dto.showDate,
        userId: req.user.id,
        message: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      });

      this.logger.log(
        `‚úÖ Seats unlocked successfully for user: ${req.user.id}`,
      );
      return success(result, '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      this.logger.error(
        `‚ùå Error unlocking seats for user: ${req.user.id}`,
        err.stack,
      );
      return error(err.message, '400', req);
    }
  }

  /**
   * üíì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö Concurrency
   */
  @Get('system/health')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö Concurrency' })
  @ApiResponse({ status: 200, description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö' })
  async getSystemHealth(@Req() req: AuthenticatedRequest) {
    try {
      const health = await this.enhancedOrderService.getSystemHealth();
      return success(health, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
   */
  @Post('system/cleanup')
  @Roles(UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' })
  @ApiResponse({ status: 200, description: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async cleanupExpiredLocks(@Req() req: AuthenticatedRequest) {
    try {
      this.logger.log('üßπ Manual cleanup triggered by admin');

      // ‡πÉ‡∏ä‡πâ ConcurrencyService ‡πÅ‡∏ó‡∏ô
      await this.concurrencyService.cleanupExpiredSeatLocks();

      this.logger.log('‚úÖ Manual cleanup completed');
      return success(
        { message: '‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' },
        '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        req,
      );
    } catch (err) {
      this.logger.error('‚ùå Error during manual cleanup', err.stack);
      return error(err.message, '400', req);
    }
  }

  /**
   * üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Enhanced Order System
   */
  @Get('system/stats')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Enhanced Order System' })
  @ApiResponse({ status: 200, description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö' })
  async getEnhancedSystemStats(@Req() req: AuthenticatedRequest) {
    try {
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      const basicStats = {
        timestamp: new Date().toISOString(),
        systemStatus: 'Enhanced Order System Active',
        features: [
          'Concurrency Control',
          'Duplicate Prevention',
          'Seat Locking',
          'Atomic Transactions',
        ],
      };

      return success(basicStats, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö Enhanced', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üìÑ Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô Excel/CSV
   */
  @Get('export/excel')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: 'Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel' })
  @ApiQuery({
    name: 'status',
    required: false,
    enum: ['PENDING', 'CONFIRMED', 'CANCELLED'],
  })
  @ApiQuery({ name: 'search', required: false, type: String })
  @ApiQuery({ name: 'referrerName', required: false, type: String })
  @ApiQuery({ name: 'createdBy', required: false, type: String })
  @ApiQuery({ name: 'showDate', required: false, type: String })
  @ApiQuery({ name: 'paymentMethod', required: false, type: String })
  @ApiQuery({
    name: 'purchaseType',
    required: false,
    enum: ['WEBSITE', 'BOOKING', 'ONSITE'],
  })
  @ApiQuery({
    name: 'attendanceStatus',
    required: false,
    enum: ['PENDING', 'CHECKED_IN', 'NO_SHOW'],
  })
  @ApiQuery({
    name: 'includeAllPages',
    required: false,
    type: Boolean,
    description: '‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤',
  })
  @ApiResponse({ status: 200, description: 'Export ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async exportOrders(
    @Req() req: AuthenticatedRequest,
    @Query('status') status?: string,
    @Query('search') search?: string,
    @Query('createdBy') createdBy?: string,
    @Query('showDate') showDate?: string,
    @Query('paymentMethod') paymentMethod?: string,
    @Query('purchaseType') purchaseType?: string,
    @Query('attendanceStatus') attendanceStatus?: string,
    @Query('includeAllPages') includeAllPages: boolean = true,
    @Query('referrerName') referrerName?: string,
  ) {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° filter (‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
      const exportData = await this.orderService.exportOrdersData({
        status,
        search,
        createdBy,
        showDate,
        paymentMethod,
        purchaseType,
        attendanceStatus,
        includeAllPages,
        referrerName,
      });

      return success(exportData, 'Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', req);
    } catch (err) {
      return error(err.message, '400', req);
    }
  }

  /**
   * üìÑ Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô PDF Preview ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
   */
  @Get('export/pdf')
  @Roles(UserRole.STAFF, UserRole.ADMIN)
  @ApiOperation({ summary: 'Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF Preview' })
  @ApiQuery({
    name: 'status',
    required: false,
    enum: ['PENDING', 'CONFIRMED', 'CANCELLED'],
  })
  @ApiQuery({ name: 'search', required: false, type: String })
  @ApiQuery({ name: 'referrerName', required: false, type: String })
  @ApiQuery({ name: 'createdBy', required: false, type: String })
  @ApiQuery({ name: 'showDate', required: false, type: String })
  @ApiQuery({ name: 'paymentMethod', required: false, type: String })
  @ApiQuery({
    name: 'purchaseType',
    required: false,
    enum: ['WEBSITE', 'BOOKING', 'ONSITE'],
  })
  @ApiQuery({
    name: 'attendanceStatus',
    required: false,
    enum: ['PENDING', 'CHECKED_IN', 'NO_SHOW'],
  })
  @ApiQuery({
    name: 'includeAllPages',
    required: false,
    type: Boolean,
    description: '‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤',
  })
  @ApiResponse({ status: 200, description: 'Export PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async exportOrdersPdf(
    @Req() req: AuthenticatedRequest,
    @Res() res: any,
    @Query('status') status?: string,
    @Query('search') search?: string,
    @Query('createdBy') createdBy?: string,
    @Query('showDate') showDate?: string,
    @Query('paymentMethod') paymentMethod?: string,
    @Query('purchaseType') purchaseType?: string,
    @Query('attendanceStatus') attendanceStatus?: string,
    @Query('includeAllPages') includeAllPages: boolean = true,
    @Query('referrerName') referrerName?: string,
  ) {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° filter
      const exportData = await this.orderService.exportOrdersData({
        status,
        search,
        createdBy,
        showDate,
        paymentMethod,
        purchaseType,
        attendanceStatus,
        includeAllPages,
        referrerName,
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
      const pdfBuffer = await this.orderService.generateOrdersPDF(exportData);

      // ‡∏™‡πà‡∏á PDF ‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ front-end
      res.set({
        'Content-Type': 'application/pdf',
        'Content-Disposition': 'inline; filename="orders-export.pdf"',
        'Content-Length': pdfBuffer.length,
      });

      res.send(pdfBuffer);
    } catch (err) {
      this.logger.error('‚ùå Error exporting PDF:', err.stack);
      return error(err.message, '400', req);
    }
  }
}
