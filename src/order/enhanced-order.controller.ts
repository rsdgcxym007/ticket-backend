import {
  Controller,
  Post,
  Patch,
  Delete,
  Body,
  Param,
  Get,
  HttpStatus,
  Logger,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';
import { EnhancedOrderService } from '../common/services/enhanced-order.service';
import { ConcurrencyService } from '../common/services/concurrency.service';
import { DuplicateOrderPreventionService } from '../common/services/duplicate-order-prevention.service';
import { ConcurrencyCleanupService } from '../common/services/concurrency-cleanup.service';
import { ThailandTimeHelper } from '../common/utils/thailand-time.helper';

/**
 * üõ°Ô∏è Enhanced Order Controller with Concurrency Control
 * ‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency
 */
@ApiTags('Enhanced Orders')
@Controller('enhanced-orders')
export class EnhancedOrderController {
  private readonly logger = new Logger(EnhancedOrderController.name);

  constructor(
    private readonly enhancedOrderService: EnhancedOrderService,
    private readonly concurrencyService: ConcurrencyService,
    private readonly duplicatePreventionService: DuplicateOrderPreventionService,
    private readonly cleanupService: ConcurrencyCleanupService,
  ) {}

  /**
   * üé´ Create order with concurrency control
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency
   */
  @Post()
  @ApiOperation({ summary: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency' })
  @ApiResponse({ status: 201, description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({
    status: 409,
    description: '‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
  })
  @ApiResponse({ status: 429, description: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ' })
  async createOrder(@Body() orderData: { userId: string; [key: string]: any }) {
    try {
      this.logger.log(
        `üé´ Enhanced order creation request from user: ${orderData.userId}`,
      );

      const order =
        await this.enhancedOrderService.createOrderWithConcurrencyControl(
          orderData.userId,
          orderData,
        );

      return {
        success: true,
        data: order,
        message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô',
        timestamp: ThailandTimeHelper.now(),
      };
    } catch (err) {
      this.logger.error(`‚ùå Enhanced order creation failed: ${err.message}`);

      // Return appropriate error status based on error type
      let statusCode = HttpStatus.BAD_REQUEST;
      if (
        err.message.includes('‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô') ||
        err.message.includes('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•')
      ) {
        statusCode = HttpStatus.CONFLICT;
      }

      return {
        success: false,
        error: err.message,
        statusCode,
        timestamp: ThailandTimeHelper.now(),
      };
    }
  }

  /**
   * üîÑ Update order with concurrency control
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency
   */
  @Patch(':id')
  @ApiOperation({ summary: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency' })
  @ApiResponse({ status: 200, description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({
    status: 409,
    description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏∑‡πà‡∏ô',
  })
  async updateOrder(
    @Param('id') id: string,
    @Body() updateData: { userId: string; [key: string]: any },
  ) {
    try {
      this.logger.log(`üîÑ Enhanced order update request: ${id}`);

      const order =
        await this.enhancedOrderService.updateOrderWithConcurrencyControl(
          id,
          updateData.userId,
          updateData,
        );

      return {
        success: true,
        data: order,
        message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: ThailandTimeHelper.now(),
      };
    } catch (err) {
      this.logger.error(`‚ùå Enhanced order update failed: ${err.message}`);
      return {
        success: false,
        error: err.message,
        statusCode: HttpStatus.BAD_REQUEST,
        timestamp: ThailandTimeHelper.now(),
      };
    }
  }

  /**
   * ‚ùå Cancel order with concurrency control
   * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency
   */
  @Delete(':id')
  @ApiOperation({ summary: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency' })
  @ApiResponse({ status: 200, description: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({
    status: 409,
    description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á',
  })
  async cancelOrder(
    @Param('id') id: string,
    @Body() cancelData: { userId: string },
  ) {
    try {
      this.logger.log(`‚ùå Enhanced order cancellation request: ${id}`);

      const result =
        await this.enhancedOrderService.cancelOrderWithConcurrencyControl(
          id,
          cancelData.userId,
        );

      return {
        success: true,
        data: result,
        message: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: ThailandTimeHelper.now(),
      };
    } catch (err) {
      this.logger.error(
        `‚ùå Enhanced order cancellation failed: ${err.message}`,
      );
      return {
        success: false,
        error: err.message,
        statusCode: HttpStatus.BAD_REQUEST,
        timestamp: ThailandTimeHelper.now(),
      };
    }
  }

  /**
   * üîí Lock seats for temporary booking
   * ‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
   */
  @Post('lock-seats')
  @ApiOperation({ summary: '‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß' })
  @ApiResponse({ status: 200, description: '‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  @ApiResponse({ status: 409, description: '‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' })
  async lockSeats(
    @Body()
    lockData: {
      seatIds: string[];
      showDate: string;
      lockDurationMinutes?: number;
    },
  ) {
    try {
      this.logger.log(
        `üîí Seat locking request: ${lockData.seatIds.join(', ')}`,
      );

      const result = await this.concurrencyService.lockSeatsForOrder(
        lockData.seatIds,
        lockData.showDate,
        lockData.lockDurationMinutes || 5,
      );

      return {
        success: true,
        data: result,
        message: '‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: ThailandTimeHelper.now(),
      };
    } catch (err) {
      this.logger.error(`‚ùå Seat locking failed: ${err.message}`);
      return {
        success: false,
        error: err.message,
        statusCode: HttpStatus.CONFLICT,
        timestamp: ThailandTimeHelper.now(),
      };
    }
  }

  /**
   * üîì Release seat locks
   * ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
   */
  @Post('release-seats')
  @ApiOperation({ summary: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á' })
  @ApiResponse({ status: 200, description: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async releaseSeats(@Body() releaseData: { seatIds: string[] }) {
    try {
      this.logger.log(
        `üîì Seat release request: ${releaseData.seatIds.join(', ')}`,
      );

      await this.concurrencyService.releaseSeatLocks(releaseData.seatIds);

      return {
        success: true,
        data: { released: releaseData.seatIds },
        message: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: ThailandTimeHelper.now(),
      };
    } catch (err) {
      this.logger.error(`‚ùå Seat release failed: ${err.message}`);
      return {
        success: false,
        error: err.message,
        statusCode: HttpStatus.BAD_REQUEST,
        timestamp: ThailandTimeHelper.now(),
      };
    }
  }

  /**
   * üìä Get system health and concurrency statistics
   * ‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency
   */
  @Get('system-health')
  @ApiOperation({ summary: '‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency' })
  @ApiResponse({ status: 200, description: '‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö' })
  async getSystemHealth() {
    try {
      const [systemHealth, cleanupStats] = await Promise.all([
        this.enhancedOrderService.getSystemHealth(),
        this.cleanupService.getCleanupStats(),
      ]);

      return {
        success: true,
        data: {
          systemHealth,
          cleanupStats,
          timestamp: ThailandTimeHelper.now(),
        },
        message: '‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö',
        timestamp: ThailandTimeHelper.now(),
      };
    } catch (err) {
      this.logger.error(`‚ùå System health check failed: ${err.message}`);
      return {
        success: false,
        error: err.message,
        statusCode: HttpStatus.INTERNAL_SERVER_ERROR,
        timestamp: ThailandTimeHelper.now(),
      };
    }
  }

  /**
   * üìä Get concurrency statistics
   * ‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency
   */
  @Get('concurrency-stats')
  @ApiOperation({ summary: '‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency' })
  @ApiResponse({ status: 200, description: '‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency' })
  async getConcurrencyStats() {
    try {
      const [concurrencyStats, duplicateStats] = await Promise.all([
        this.concurrencyService.getConcurrencyStats(),
        this.duplicatePreventionService.getDuplicatePreventionStats(),
      ]);

      return {
        success: true,
        data: {
          concurrency: concurrencyStats,
          duplicatePrevention: duplicateStats,
          timestamp: ThailandTimeHelper.now(),
        },
        message: '‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrency',
        timestamp: ThailandTimeHelper.now(),
      };
    } catch (err) {
      this.logger.error(`‚ùå Concurrency stats failed: ${err.message}`);
      return {
        success: false,
        error: err.message,
        statusCode: HttpStatus.INTERNAL_SERVER_ERROR,
        timestamp: ThailandTimeHelper.now(),
      };
    }
  }

  /**
   * üö® Emergency cleanup
   * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
   */
  @Post('emergency-cleanup')
  @ApiOperation({ summary: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô - Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' })
  @ApiResponse({ status: 200, description: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async emergencyCleanup() {
    try {
      this.logger.warn('üö® Emergency cleanup requested');

      await this.cleanupService.emergencyCleanup();

      return {
        success: true,
        data: { cleanedAt: ThailandTimeHelper.now() },
        message: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: ThailandTimeHelper.now(),
      };
    } catch (err) {
      this.logger.error(`‚ùå Emergency cleanup failed: ${err.message}`);
      return {
        success: false,
        error: err.message,
        statusCode: HttpStatus.INTERNAL_SERVER_ERROR,
        timestamp: ThailandTimeHelper.now(),
      };
    }
  }

  /**
   * üßπ Manual cleanup
   * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
   */
  @Post('manual-cleanup')
  @ApiOperation({ summary: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á - Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' })
  @ApiResponse({ status: 200, description: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  async manualCleanup() {
    try {
      this.logger.log('üßπ Manual cleanup requested');

      await Promise.all([
        this.cleanupService.cleanupExpiredSeatLocks(),
        this.cleanupService.cleanupExpiredOrders(),
      ]);

      return {
        success: true,
        data: { cleanedAt: ThailandTimeHelper.now() },
        message: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: ThailandTimeHelper.now(),
      };
    } catch (err) {
      this.logger.error(`‚ùå Manual cleanup failed: ${err.message}`);
      return {
        success: false,
        error: err.message,
        statusCode: HttpStatus.INTERNAL_SERVER_ERROR,
        timestamp: ThailandTimeHelper.now(),
      };
    }
  }
}
