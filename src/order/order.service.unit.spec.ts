/**
 * üß™ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ Testing ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Order - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
 *
 * ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå‡∏°‡∏µ 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å:
 *
 * 1. üìò Unit Test (‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏¢‡πà‡∏≠‡∏¢)
 *    - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö function ‡∏´‡∏£‡∏∑‡∏≠ method ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô
 *    - ‡πÉ‡∏ä‡πâ Mock/Stub ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á (Database, API)
 *    - ‡πÄ‡∏£‡πá‡∏ß, ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏á‡πà‡∏≤‡∏¢, ‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
 *    - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö function createOrder ‡∏ß‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á order ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 *
 * 2. üìó Integration Test (‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô)
 *    - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á components ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
 *    - ‡πÉ‡∏ä‡πâ Database ‡∏à‡∏£‡∏¥‡∏á ‡∏´‡∏£‡∏∑‡∏≠ Test Database
 *    - ‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤ Unit Test ‡πÅ‡∏ï‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
 *    - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö OrderService + Database ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
 *
 * 3. üìô E2E Test (End-to-End Testing - ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£)
 *    - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô‡∏à‡∏ô‡∏à‡∏ö ‡∏ú‡πà‡∏≤‡∏ô API
 *    - ‡πÉ‡∏ä‡πâ HTTP Request ‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
 *    - ‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏ï‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
 *    - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: POST /orders, GET /orders/:id ‡∏ú‡πà‡∏≤‡∏ô HTTP
 *
 * üéØ ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Test Pyramid):
 *    - Unit Tests (70%) - ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
 *    - Integration Tests (20%) - ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
 *    - E2E Tests (10%) - ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ä‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
 */

import { Test, TestingModule } from '@nestjs/testing';
import { OrderService } from './order.service';
import { getRepositoryToken } from '@nestjs/typeorm';
import { Order } from './order.entity';
import { SeatBooking } from '../seats/seat-booking.entity';
import { Seat } from '../seats/seat.entity';
import { User } from '../user/user.entity';
import { Referrer } from '../referrer/referrer.entity';
import { Payment } from '../payment/payment.entity';
import { AuditLog } from '../audit/audit-log.entity';
import { ConfigService } from '@nestjs/config';
import { BadRequestException, ForbiddenException } from '@nestjs/common';
import {
  OrderStatus,
  PaymentMethod,
  TicketType,
  UserRole,
  SeatStatus,
  BookingStatus,
} from '../common/enums';
import { CreateOrderRequest } from './order.service';

/**
 * üìò UNIT TESTS - ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏¢‡πà‡∏≠‡∏¢
 *
 * ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö OrderService ‡πÅ‡∏ï‡πà‡∏•‡∏∞ method ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£: ‡πÉ‡∏ä‡πâ Mock Repository ‡πÅ‡∏ó‡∏ô Database ‡∏à‡∏£‡∏¥‡∏á
 * ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ: ‡πÄ‡∏£‡πá‡∏ß, ‡πÅ‡∏¢‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î, ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏∂‡πà‡∏á Database
 */
describe('üìò OrderService - Unit Tests', () => {
  let service: OrderService;

  // üé≠ Mock Data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  const mockUser = {
    id: 'user-123',
    email: 'test@example.com',
    name: '‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    phone: '0812345678',
    role: UserRole.ADMIN,
    isActive: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  };

  const mockOrder = {
    id: 'order-123',
    userId: 'user-123',
    status: OrderStatus.PENDING,
    paymentMethod: PaymentMethod.QR_CODE,
    ticketType: TicketType.RINGSIDE,
    customerName: '‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    customerEmail: 'test@example.com',
    customerPhone: '0812345678',
    total: 1500,
    totalAmount: 1500,
    quantity: 1,
    showDate: new Date('2024-12-31T19:00:00Z'),
    createdAt: new Date(),
    updatedAt: new Date(),
    user: mockUser,
    seatBookings: [],
    payments: [],
    referrer: null,
    reference: 'ORD-001',
    commission: 0,
    commissionRate: 0,
    notes: '',
    source: 'ONLINE',
    expiresAt: new Date(Date.now() + 15 * 60 * 1000),
  };

  const mockSeat = {
    id: 'seat-123',
    seatNumber: 'A1',
    row: 'A',
    section: '1',
    status: SeatStatus.AVAILABLE,
    zoneId: 'zone-1',
    zone: null,
    price: 1500,
    tier: 'premium',
    isActive: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  };

  // üé≠ Mock Repositories - ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á Database
  const mockOrderRepository = {
    find: jest.fn(),
    findOne: jest.fn(),
    create: jest.fn(),
    save: jest.fn(),
    update: jest.fn(),
    delete: jest.fn(),
    count: jest.fn(),
    createQueryBuilder: jest.fn(() => ({
      leftJoinAndSelect: jest.fn().mockReturnThis(),
      where: jest.fn().mockReturnThis(),
      andWhere: jest.fn().mockReturnThis(),
      orderBy: jest.fn().mockReturnThis(),
      skip: jest.fn().mockReturnThis(),
      take: jest.fn().mockReturnThis(),
      getManyAndCount: jest.fn().mockResolvedValue([[], 0]),
      select: jest.fn().mockReturnThis(),
      getRawOne: jest.fn().mockResolvedValue({ total: 0 }),
    })),
  };

  const mockUserRepository = {
    findOne: jest.fn(),
  };

  const mockSeatRepository = {
    find: jest.fn(),
    findByIds: jest.fn(),
    update: jest.fn(),
  };

  const mockSeatBookingRepository = {
    find: jest.fn(),
    create: jest.fn(),
    save: jest.fn(),
    update: jest.fn(),
    delete: jest.fn(),
  };

  const mockAuditLogRepository = {
    create: jest.fn(),
    save: jest.fn(),
  };

  const mockReferrerRepository = {
    findOne: jest.fn(),
  };

  const mockPaymentRepository = {
    find: jest.fn(),
  };

  const mockConfigService = {
    get: jest.fn(),
  };

  // üèóÔ∏è Setup ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        OrderService,
        {
          provide: getRepositoryToken(Order),
          useValue: mockOrderRepository,
        },
        {
          provide: getRepositoryToken(User),
          useValue: mockUserRepository,
        },
        {
          provide: getRepositoryToken(Seat),
          useValue: mockSeatRepository,
        },
        {
          provide: getRepositoryToken(SeatBooking),
          useValue: mockSeatBookingRepository,
        },
        {
          provide: getRepositoryToken(AuditLog),
          useValue: mockAuditLogRepository,
        },
        {
          provide: getRepositoryToken(Referrer),
          useValue: mockReferrerRepository,
        },
        {
          provide: getRepositoryToken(Payment),
          useValue: mockPaymentRepository,
        },
        {
          provide: ConfigService,
          useValue: mockConfigService,
        },
      ],
    }).compile();

    service = module.get<OrderService>(OrderService);
  });

  // üßπ Cleanup ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  afterEach(() => {
    jest.clearAllMocks();
  });

  // ‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Service
  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  // üéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Order
  describe('createOrder', () => {
    it('‚úÖ ‡∏Ñ‡∏ß‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á order ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', async () => {
      // üìù Arrange: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      const createOrderRequest: CreateOrderRequest = {
        userId: 'user-123',
        ticketType: TicketType.RINGSIDE,
        quantity: 1,
        seatIds: ['seat-123'],
        showDate: '2024-12-31T19:00:00Z',
        customerName: '‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        customerEmail: 'test@example.com',
        customerPhone: '0812345678',
        paymentMethod: PaymentMethod.QR_CODE,
      };

      // üé≠ ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Repository
      mockUserRepository.findOne.mockResolvedValue(mockUser);
      mockSeatRepository.findByIds.mockResolvedValue([mockSeat]);
      mockSeatBookingRepository.find.mockResolvedValue([]); // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
      mockOrderRepository.create.mockReturnValue(mockOrder);
      mockOrderRepository.save.mockResolvedValue(mockOrder);
      mockOrderRepository.findOne.mockResolvedValue(mockOrder); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reload
      mockSeatBookingRepository.create.mockReturnValue({});
      mockSeatBookingRepository.save.mockResolvedValue({});
      mockAuditLogRepository.create.mockReturnValue({});
      mockAuditLogRepository.save.mockResolvedValue({});

      // üöÄ Act: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      const result = await service.createOrder(createOrderRequest, 'user-123');

      // üîç Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      expect(result).toBeDefined();
      expect(mockUserRepository.findOne).toHaveBeenCalledWith({
        where: { id: 'user-123' },
      });
      expect(mockOrderRepository.create).toHaveBeenCalled();
      expect(mockOrderRepository.save).toHaveBeenCalled();
    });

    it('‚ùå ‡∏Ñ‡∏ß‡∏£ throw BadRequestException ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö user', async () => {
      // üìù Arrange: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      const createOrderRequest: CreateOrderRequest = {
        userId: 'user-404',
        ticketType: TicketType.RINGSIDE,
        quantity: 1,
        seatIds: ['seat-123'],
        showDate: '2024-12-31T19:00:00Z',
        customerName: '‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        customerEmail: 'test@example.com',
        customerPhone: '0812345678',
        paymentMethod: PaymentMethod.QR_CODE,
      };

      // üé≠ ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏û‡∏ö user
      mockUserRepository.findOne.mockResolvedValue(null);

      // üöÄ Act & Assert: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ error ‡∏ñ‡∏π‡∏Å throw ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
      await expect(
        service.createOrder(createOrderRequest, 'user-404'),
      ).rejects.toThrow(BadRequestException);
    });

    it('‚ùå ‡∏Ñ‡∏ß‡∏£ throw BadRequestException ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á', async () => {
      // üìù Arrange: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      const createOrderRequest: CreateOrderRequest = {
        userId: 'user-123',
        ticketType: TicketType.RINGSIDE,
        quantity: 1,
        seatIds: ['seat-booked'],
        showDate: '2024-12-31T19:00:00Z',
        customerName: '‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        customerEmail: 'test@example.com',
        customerPhone: '0812345678',
        paymentMethod: PaymentMethod.QR_CODE,
      };

      const bookedSeatBooking = {
        id: 'booking-123',
        seat: mockSeat,
        showDate: new Date('2024-12-31T19:00:00Z'),
        status: BookingStatus.CONFIRMED,
      };

      // üé≠ ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
      mockUserRepository.findOne.mockResolvedValue(mockUser);
      mockSeatRepository.findByIds.mockResolvedValue([mockSeat]);
      mockSeatBookingRepository.find.mockResolvedValue([bookedSeatBooking]); // ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß

      // üöÄ Act & Assert
      await expect(
        service.createOrder(createOrderRequest, 'user-123'),
      ).rejects.toThrow(BadRequestException);
    });
  });

  // üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Orders
  describe('findAll', () => {
    it('‚úÖ ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏∑‡∏ô orders ‡πÅ‡∏ö‡∏ö pagination', async () => {
      // üìù Arrange & üöÄ Act
      const result = await service.findAll({ page: 1, limit: 10 });

      // üîç Assert
      expect(result).toEqual({
        items: [],
        total: 0,
        page: 1,
        limit: 10,
        totalPages: 0,
      });
    });

    it('‚úÖ ‡∏Ñ‡∏ß‡∏£‡∏Å‡∏£‡∏≠‡∏á orders ‡∏ï‡∏≤‡∏° status', async () => {
      // üìù Arrange
      const mockQueryBuilder = {
        leftJoinAndSelect: jest.fn().mockReturnThis(),
        where: jest.fn().mockReturnThis(),
        andWhere: jest.fn().mockReturnThis(),
        orderBy: jest.fn().mockReturnThis(),
        skip: jest.fn().mockReturnThis(),
        take: jest.fn().mockReturnThis(),
        getManyAndCount: jest.fn().mockResolvedValue([[], 0]),
        select: jest.fn().mockReturnThis(),
        getRawOne: jest.fn().mockResolvedValue({}),
      };

      mockOrderRepository.createQueryBuilder.mockReturnValue(mockQueryBuilder);

      // üöÄ Act
      await service.findAll({
        page: 1,
        limit: 10,
        status: OrderStatus.PENDING,
      });

      // üîç Assert
      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith(
        'order.status = :status',
        { status: OrderStatus.PENDING },
      );
    });
  });

  // üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Order ‡∏ï‡∏≤‡∏° ID
  describe('findById', () => {
    it('‚úÖ ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏∑‡∏ô order ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö', async () => {
      // üìù Arrange
      mockOrderRepository.findOne.mockResolvedValue(mockOrder);

      // üöÄ Act
      const result = await service.findById('order-123');

      // üîç Assert
      expect(result).toBeDefined();
      expect(result.id).toBe('order-123');
      expect(result.customerName).toBe('‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
      expect(mockOrderRepository.findOne).toHaveBeenCalledWith({
        where: { id: 'order-123' },
        relations: [
          'user',
          'referrer',
          'seatBookings',
          'seatBookings.seat',
          'seatBookings.seat.zone',
          'payment',
        ],
      });
    });

    it('‚úÖ ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏∑‡∏ô null ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö order', async () => {
      // üìù Arrange
      mockOrderRepository.findOne.mockResolvedValue(null);

      // üöÄ Act
      const result = await service.findById('order-404');

      // üîç Assert
      expect(result).toBeNull();
    });
  });

  // ‚úèÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Order
  describe('update', () => {
    it('‚úÖ ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç order ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', async () => {
      // üìù Arrange
      const updateData = {
        customerName: '‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà',
        customerPhone: '0898765432',
      };

      mockUserRepository.findOne.mockResolvedValue(mockUser);
      mockOrderRepository.findOne.mockResolvedValue(mockOrder);
      mockOrderRepository.update.mockResolvedValue({});
      mockOrderRepository.findOne.mockResolvedValueOnce({
        ...mockOrder,
        ...updateData,
      });
      mockAuditLogRepository.create.mockReturnValue({});
      mockAuditLogRepository.save.mockResolvedValue({});

      // üöÄ Act
      const result = await service.update('order-123', updateData, 'user-123');

      // üîç Assert
      expect(result).toBeDefined();
      expect(mockOrderRepository.update).toHaveBeenCalledWith(
        'order-123',
        expect.objectContaining(updateData),
      );
    });
  });

  // ‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Order
  describe('cancel', () => {
    it('‚úÖ ‡∏Ñ‡∏ß‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å order ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', async () => {
      // üìù Arrange
      mockUserRepository.findOne.mockResolvedValue(mockUser);
      mockOrderRepository.findOne.mockResolvedValue(mockOrder);
      mockOrderRepository.update.mockResolvedValue({});
      mockSeatBookingRepository.find.mockResolvedValue([]);
      mockSeatBookingRepository.update.mockResolvedValue({});
      mockAuditLogRepository.create.mockReturnValue({});
      mockAuditLogRepository.save.mockResolvedValue({});

      // üöÄ Act
      const result = await service.cancel('order-123', 'user-123');

      // üîç Assert
      expect(result).toEqual({
        success: true,
        message: 'Order cancelled successfully',
      });
      expect(mockOrderRepository.update).toHaveBeenCalledWith(
        'order-123',
        expect.objectContaining({ status: OrderStatus.CANCELLED }),
      );
    });
  });

  // ‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  describe('confirmPayment', () => {
    it('‚úÖ staff ‡∏Ñ‡∏ß‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', async () => {
      // üìù Arrange
      const staffUser = { ...mockUser, role: UserRole.STAFF };
      mockUserRepository.findOne.mockResolvedValue(staffUser);
      mockOrderRepository.findOne.mockResolvedValue(mockOrder);
      mockOrderRepository.update.mockResolvedValue({});
      mockSeatBookingRepository.update.mockResolvedValue({});
      mockAuditLogRepository.create.mockReturnValue({});
      mockAuditLogRepository.save.mockResolvedValue({});

      // üöÄ Act
      const result = await service.confirmPayment('order-123', 'staff-123');

      // üîç Assert
      expect(result).toEqual({
        success: true,
        message: 'Payment confirmed successfully',
      });
      expect(mockOrderRepository.update).toHaveBeenCalledWith(
        'order-123',
        expect.objectContaining({ status: OrderStatus.CONFIRMED }),
      );
    });

    it('‚ùå user ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ', async () => {
      // üìù Arrange: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ user ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'user' ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà staff/admin)
      const regularUser = { ...mockUser, role: 'user' };
      mockUserRepository.findOne.mockResolvedValue(regularUser);
      mockOrderRepository.findOne.mockResolvedValue(mockOrder);

      // üöÄ Act & Assert
      await expect(
        service.confirmPayment('order-123', 'user-123'),
      ).rejects.toThrow(ForbiddenException);
    });
  });

  // üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™—Å—Ç–∞—Çistics
  describe('getOrderStats', () => {
    it('‚úÖ ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ orders', async () => {
      // üìù Arrange
      mockOrderRepository.count.mockResolvedValue(0);

      // üöÄ Act
      const result = await service.getOrderStats();

      // üîç Assert
      expect(result).toBeDefined();
      expect(result.totalOrders).toBe(0);
      expect(result.totalRevenue).toBe(0);
      expect(result.pendingOrders).toBe(0);
      expect(result.confirmedOrders).toBe(0);
      expect(result.cancelledOrders).toBe(0);
      expect(result.expiredOrders).toBe(0);
    });
  });

  // üîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
  describe('changeSeats', () => {
    it('‚úÖ staff ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', async () => {
      // üìù Arrange
      const staffUser = { ...mockUser, role: UserRole.STAFF };
      const newSeatNumbers = ['A2'];

      mockUserRepository.findOne.mockResolvedValue(staffUser);
      mockOrderRepository.findOne.mockResolvedValue(mockOrder);
      mockSeatRepository.find.mockResolvedValue([
        { ...mockSeat, seatNumber: 'A2', status: SeatStatus.AVAILABLE },
      ]);
      mockSeatBookingRepository.find.mockResolvedValue([]);
      mockSeatBookingRepository.delete.mockResolvedValue({});
      mockSeatBookingRepository.create.mockReturnValue({});
      mockSeatBookingRepository.save.mockResolvedValue({});
      mockOrderRepository.update.mockResolvedValue({});
      mockAuditLogRepository.create.mockReturnValue({});
      mockAuditLogRepository.save.mockResolvedValue({});

      // üöÄ Act
      const result = await service.changeSeats(
        'order-123',
        newSeatNumbers,
        'staff-123',
      );

      // üîç Assert
      expect(result).toEqual(
        expect.objectContaining({
          success: true,
          message: expect.stringContaining('Seats changed successfully'),
        }),
      );
    });
  });

  // üóëÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö Order
  describe('remove', () => {
    it('‚úÖ admin ‡∏Ñ‡∏ß‡∏£‡∏•‡∏ö order ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', async () => {
      // üìù Arrange
      const adminUser = { ...mockUser, role: UserRole.ADMIN };
      mockUserRepository.findOne.mockResolvedValue(adminUser);
      mockOrderRepository.findOne.mockResolvedValue(mockOrder);
      mockSeatBookingRepository.find.mockResolvedValue([]);
      mockSeatBookingRepository.delete.mockResolvedValue({});
      mockOrderRepository.delete.mockResolvedValue({});
      mockAuditLogRepository.create.mockReturnValue({});
      mockAuditLogRepository.save.mockResolvedValue({});

      // üöÄ Act
      const result = await service.remove('order-123', 'admin-123');

      // üîç Assert
      expect(result).toEqual({
        success: true,
        message: 'Order removed successfully',
      });
      expect(mockOrderRepository.delete).toHaveBeenCalledWith('order-123');
    });
  });

  // üö® ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error
  describe('Error Handling', () => {
    it('‚ùå ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ database connection error', async () => {
      // üìù Arrange
      mockOrderRepository.findOne.mockRejectedValue(
        new Error('Database connection failed'),
      );

      // üöÄ Act & Assert
      await expect(service.findById('order-123')).rejects.toThrow(
        'Database connection failed',
      );
    });

    it('‚ùå ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ invalid payment method', async () => {
      // üìù Arrange
      const createOrderRequest: CreateOrderRequest = {
        userId: 'user-123',
        ticketType: TicketType.RINGSIDE,
        quantity: 1,
        seatIds: ['seat-123'],
        showDate: '2024-12-31T19:00:00Z',
        customerName: '‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        customerEmail: 'test@example.com',
        customerPhone: '0812345678',
        paymentMethod: 'INVALID_METHOD' as PaymentMethod,
      };

      mockUserRepository.findOne.mockResolvedValue(mockUser);

      // üöÄ Act & Assert
      await expect(
        service.createOrder(createOrderRequest, 'user-123'),
      ).rejects.toThrow();
    });
  });
});
