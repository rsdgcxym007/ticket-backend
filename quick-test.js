#!/usr/bin/env node

/**
 * üöÄ Quick Test Runner ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß
 * ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢
 */

const axios = require('axios');

// Configuration
const CONFIG = {
  // Environment-aware base URL
  baseUrl:
    process.env.NODE_ENV === 'production'
      ? 'https://api-patongboxingstadiumticket.com'
      : 'http://localhost:4000',
  timeout: 30000,
  testEmail: 'info@patongboxingstadiumticket.com', // Production email
  domains: {
    production: {
      frontend: 'https://patongboxingstadiumticket.com',
      backend: 'https://api-patongboxingstadiumticket.com',
      api: 'https://api-patongboxingstadiumticket.com/api',
    },
    development: {
      frontend: 'http://localhost:3000',
      backend: 'http://localhost:4000',
      api: 'http://localhost:4000/api',
    },
  },
};

// ANSI Colors
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function success(message) {
  log(`‚úÖ ${message}`, colors.green);
}

function error(message) {
  log(`‚ùå ${message}`, colors.red);
}

function info(message) {
  log(`‚ÑπÔ∏è  ${message}`, colors.blue);
}

function warning(message) {
  log(`‚ö†Ô∏è  ${message}`, colors.yellow);
}

function header(message) {
  console.log('\n' + '='.repeat(50));
  log(message, colors.bold + colors.cyan);
  console.log('='.repeat(50));
}

// HTTP Request Helper
async function makeRequest(method, endpoint, data = null) {
  try {
    const config = {
      method: method.toLowerCase(),
      url: `${CONFIG.baseUrl}${endpoint}`,
      timeout: CONFIG.timeout,
      headers: {
        'Content-Type': 'application/json',
      },
    };

    if (data) {
      config.data = data;
    }

    const response = await axios(config);
    return {
      success: true,
      data: response.data,
      status: response.status,
    };
  } catch (err) {
    return {
      success: false,
      error: err.response?.data || err.message,
      status: err.response?.status || 500,
    };
  }
}

// Test Cases
async function testApiHealth() {
  header('üè• API Health Check');

  const response = await makeRequest('GET', '/health');

  if (response.success) {
    success('API server is running');
    info(`Status: ${response.status}`);
    return true;
  } else {
    error('API server is not responding');
    error(`Error: ${response.error}`);
    return false;
  }
}

async function testDirectEmailSending() {
  header('üìß Direct Email Test');

  const emailData = {
    orderId: `TEST-${Date.now()}`,
    recipientEmail: CONFIG.testEmail,
    recipientName: '‡∏ú‡∏π‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
    ticketType: '‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
    quantity: 2,
    showDate: '25 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2568',
    totalAmount: 3000,
    seatNumbers: ['A1', 'A2'],
    includeQRCode: true,
    notes: '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
  };

  info('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö...');
  info(`‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${CONFIG.testEmail}`);

  const response = await makeRequest(
    'POST',
    '/api/email/send-ticket',
    emailData,
  );

  if (response.success) {
    success('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    info('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô inbox');
    info(`Order ID: ${emailData.orderId}`);
    return true;
  } else {
    error('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    error(`Error: ${JSON.stringify(response.error, null, 2)}`);
    return false;
  }
}

async function testEmailTemplates() {
  header('üé® Email Templates Test');

  const response = await makeRequest('GET', '/api/email/templates');

  if (response.success) {
    success('‡∏î‡∏∂‡∏á Email Templates ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    if (response.data.data && Array.isArray(response.data.data)) {
      info(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Templates: ${response.data.data.length}`);
      response.data.data.forEach((template, index) => {
        info(`${index + 1}. ${template.name} (${template.type})`);
      });
    }
    return true;
  } else {
    error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Email Templates ‡πÑ‡∏î‡πâ');
    error(`Error: ${response.error}`);
    return false;
  }
}

async function testSeatedTicketEmail() {
  header('üé´ Seated Ticket Email Test');

  const emailData = {
    orderId: `SEATED-${Date.now()}`,
    recipientEmail: CONFIG.testEmail,
    recipientName: '‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á',
    ticketType: '‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á VIP',
    quantity: 2,
    showDate: '20 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2568',
    totalAmount: 4500,
    seatNumbers: ['VIP-A1', 'VIP-A2'],
    includeQRCode: true,
    notes: '‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á VIP ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©',
  };

  info('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á...');

  const response = await makeRequest(
    'POST',
    '/api/email/send-ticket',
    emailData,
  );

  if (response.success) {
    success('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    info('‚ú® ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤, ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á VIP-A1, VIP-A2, QR Code');
    return true;
  } else {
    error('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    error(`Error: ${JSON.stringify(response.error, null, 2)}`);
    return false;
  }
}

async function testStandingTicketEmail() {
  header('üé™ Standing Ticket Email Test');

  const emailData = {
    orderId: `STANDING-${Date.now()}`,
    recipientEmail: CONFIG.testEmail,
    recipientName: '‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô',
    ticketType: '‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô',
    quantity: 3,
    showDate: '22 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2568',
    totalAmount: 2400,
    seatNumbers: [],
    includeQRCode: true,
    notes: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ | ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà 2 ‡∏Ñ‡∏ô, ‡πÄ‡∏î‡πá‡∏Å 1 ‡∏Ñ‡∏ô',
  };

  info('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô...');

  const response = await makeRequest(
    'POST',
    '/api/email/send-ticket',
    emailData,
  );

  if (response.success) {
    success('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    info(
      '‚ú® ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 3 ‡πÉ‡∏ö, ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà 2 ‡∏Ñ‡∏ô ‡πÄ‡∏î‡πá‡∏Å 1 ‡∏Ñ‡∏ô, QR Code',
    );
    return true;
  } else {
    error('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏∑‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    error(`Error: ${JSON.stringify(response.error, null, 2)}`);
    return false;
  }
}

async function testEmailWithoutQR() {
  header('üìÑ Email Without QR Test');

  const emailData = {
    orderId: `NO-QR-${Date.now()}`,
    recipientEmail: CONFIG.testEmail,
    recipientName: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ QR',
    ticketType: '‡∏ï‡∏±‡πã‡∏ß‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤',
    quantity: 1,
    showDate: '24 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2568',
    totalAmount: 1200,
    seatNumbers: ['B10'],
    includeQRCode: false,
    notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ QR Code',
  };

  info('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏°‡∏µ QR Code...');

  const response = await makeRequest(
    'POST',
    '/api/email/send-ticket',
    emailData,
  );

  if (response.success) {
    success('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏°‡∏µ QR ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    info('‚ú® ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ QR Code section');
    return true;
  } else {
    error('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏°‡∏µ QR ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    error(`Error: ${JSON.stringify(response.error, null, 2)}`);
    return false;
  }
}

async function testLargeAmountFormatting() {
  header('üí∞ Large Amount Formatting Test');

  const emailData = {
    orderId: `LARGE-${Date.now()}`,
    recipientEmail: CONFIG.testEmail,
    recipientName: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏ç‡πà',
    ticketType: '‡∏ï‡∏±‡πã‡∏ß Premium',
    quantity: 5,
    showDate: '26 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2568',
    totalAmount: 123456.78,
    seatNumbers: ['P1', 'P2', 'P3', 'P4', 'P5'],
    includeQRCode: true,
    notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà',
  };

  info('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏ç‡πà...');

  const response = await makeRequest(
    'POST',
    '/api/email/send-ticket',
    emailData,
  );

  if (response.success) {
    success('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    info('‚ú® ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏ø123,456.78');
    return true;
  } else {
    error('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    error(`Error: ${JSON.stringify(response.error, null, 2)}`);
    return false;
  }
}

// Main Test Runner
async function runAllTests() {
  console.clear();

  header('ÔøΩ PATONG BOXING STADIUM - EMAIL SYSTEM TESTS');
  log('‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏°‡∏ß‡∏¢‡∏õ‡πà‡∏≤‡∏ï‡∏≠‡∏á', colors.bold);

  const currentEnv = process.env.NODE_ENV || 'development';
  const currentDomain =
    CONFIG.domains[currentEnv] || CONFIG.domains.development;

  info(`ÔøΩ Environment: ${currentEnv}`);
  info(`ÔøΩüéØ Target Email: ${CONFIG.testEmail}`);
  info(`üåê Frontend: ${currentDomain.frontend}`);
  info(`üîó Backend: ${currentDomain.backend}`);
  info(`üì± API: ${currentDomain.api}`);
  info(`‚è±Ô∏è  Timeout: ${CONFIG.timeout}ms`);
  const testResults = [];

  try {
    // Test 1: API Health
    const healthCheck = await testApiHealth();
    testResults.push({ name: 'API Health Check', success: healthCheck });

    if (!healthCheck) {
      warning('‚ö†Ô∏è  API server ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
      showSummary(testResults);
      return;
    }

    // Test 2: Email Templates
    const templatesTest = await testEmailTemplates();
    testResults.push({ name: 'Email Templates', success: templatesTest });

    // Test 3: Direct Email
    const directEmailTest = await testDirectEmailSending();
    testResults.push({
      name: 'Direct Email Sending',
      success: directEmailTest,
    });

    // Test 4: Seated Ticket Email
    const seatedTest = await testSeatedTicketEmail();
    testResults.push({ name: 'Seated Ticket Email', success: seatedTest });

    // Test 5: Standing Ticket Email
    const standingTest = await testStandingTicketEmail();
    testResults.push({ name: 'Standing Ticket Email', success: standingTest });

    // Test 6: Email without QR
    const noQrTest = await testEmailWithoutQR();
    testResults.push({ name: 'Email without QR', success: noQrTest });

    // Test 7: Large Amount Formatting
    const largeAmountTest = await testLargeAmountFormatting();
    testResults.push({
      name: 'Large Amount Formatting',
      success: largeAmountTest,
    });
  } catch (error) {
    error(`üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${error.message}`);
    testResults.push({
      name: 'Overall Test',
      success: false,
      error: error.message,
    });
  }

  showSummary(testResults);
}

function showSummary(results) {
  header('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');

  const passed = results.filter((r) => r.success).length;
  const total = results.length;

  if (passed === total) {
    success(`üéâ ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${passed}/${total}`);
  } else {
    warning(`‚ö†Ô∏è  ‡∏ú‡πà‡∏≤‡∏ô: ${passed}/${total}`);
  }

  console.log('\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:');
  results.forEach((result, index) => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    const color = result.success ? colors.green : colors.red;
    log(`${index + 1}. ${result.name}: ${status}`, color);
  });

  console.log('\n' + '='.repeat(50));
  info('üìß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô inbox ‡∏Ç‡∏≠‡∏á ' + CONFIG.testEmail);
  info('üé® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö design ‡∏ß‡πà‡∏≤‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞ responsive');
  info('üì± ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏î‡πâ‡∏ß‡∏¢');
  info('üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');

  if (passed < total) {
    warning('\n‚ö†Ô∏è  ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô:');
    warning('1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Gmail SMTP configuration');
    warning('2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö .env file');
    warning('3. ‡∏î‡∏π server logs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î error');
  } else {
    success('\nüöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!');
  }

  console.log('='.repeat(50));
}

// Run tests if called directly
if (require.main === module) {
  const args = process.argv.slice(2);

  if (args.includes('--help') || args.includes('-h')) {
    console.log(`
üß™ Ticket Email System - Quick Test Runner

Usage:
  node quick-test.js [options]

Options:
  --help, -h          Show this help message
  --email <email>     Set test email address (default: ${CONFIG.testEmail})
  --url <url>         Set API base URL (default: ${CONFIG.baseUrl})

Examples:
  node quick-test.js
  node quick-test.js --email test@gmail.com
  node quick-test.js --url http://localhost:4000
    `);
    process.exit(0);
  }

  // Parse custom email
  const emailIndex = args.indexOf('--email');
  if (emailIndex !== -1 && args[emailIndex + 1]) {
    CONFIG.testEmail = args[emailIndex + 1];
  }

  // Parse custom URL
  const urlIndex = args.indexOf('--url');
  if (urlIndex !== -1 && args[urlIndex + 1]) {
    CONFIG.baseUrl = args[urlIndex + 1];
  }

  runAllTests().catch((err) => {
    error(`Fatal error: ${err.message}`);
    process.exit(1);
  });
}

module.exports = {
  runAllTests,
  testApiHealth,
  testDirectEmailSending,
  testSeatedTicketEmail,
  testStandingTicketEmail,
  CONFIG,
};
