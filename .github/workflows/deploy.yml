name: Deploy to AWS EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build application
        run: npm run build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r dist deployment/
          cp -r node_modules deployment/
          cp package*.json deployment/
          cp ecosystem.config.js deployment/ || echo "ecosystem.config.js not found, skipping"
          cp .env.prod deployment/.env || echo ".env.prod not found, will create from secrets"
          cd deployment && zip -r ../deployment.zip .

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo apt update && sudo apt install unzip -y
            sudo mkdir -p /var/www/ticket-backend
            sudo chown -R $USER:$USER /var/www/ticket-backend

            pm2 stop ticket-backend || echo "No existing app running"
            if [ -d "/var/www/ticket-backend/current" ]; then
              mv /var/www/ticket-backend/current /var/www/ticket-backend/backup-$(date +%Y%m%d-%H%M%S)
            fi

            mkdir -p /var/www/ticket-backend/current

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          source: deployment.zip
          target: /var/www/ticket-backend/

      - name: Extract and start application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            cd /var/www/ticket-backend
            unzip -o deployment.zip -d current/
            rm deployment.zip

            cd current

            # Create .env if missing
            if [ ! -f ".env" ]; then
              echo "NODE_ENV=production" > .env
              echo "PORT=4000" >> .env
              echo "DATABASE_HOST=${{ secrets.RDS_HOST }}" >> .env
              echo "DATABASE_PORT=5432" >> .env
              echo "DATABASE_USERNAME=${{ secrets.RDS_USERNAME }}" >> .env
              echo "DATABASE_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> .env
              echo "DATABASE_NAME=${{ secrets.RDS_DATABASE }}" >> .env
              echo "DATABASE_SSL=true" >> .env
              echo "DATABASE_SYNCHRONIZE=false" >> .env
              echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
              echo "SWAGGER_ENABLED=false" >> .env
            fi

            # Install production dependencies
            npm ci --only=production || echo "Dependencies already installed"

            # Start app with PM2
            if [ -f "ecosystem.config.js" ]; then
              pm2 start ecosystem.config.js --env production
            elif [ -f "dist/main.js" ]; then
              echo "⚠️ ecosystem.config.js not found. Starting main.js directly"
              pm2 start dist/main.js --name ticket-backend
            else
              echo "❌ dist/main.js not found. Build step may have failed."
              exit 1
            fi

            pm2 save
            pm2 startup

            # Setup nginx reverse proxy
            sudo tee /etc/nginx/sites-available/ticket-backend > /dev/null <<EOF
            server {
                listen 80;
                server_name ${{ secrets.DOMAIN_NAME }} ${{ secrets.AWS_EC2_HOST }};

                location / {
                    proxy_pass http://localhost:4000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_cache_bypass \$http_upgrade;
                }

                location /health {
                    proxy_pass http://localhost:4000/health;
                    access_log off;
                }
            }
            EOF

            sudo ln -sf /etc/nginx/sites-available/ticket-backend /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl reload nginx
