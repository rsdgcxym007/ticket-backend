name: Deploy to AWS EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: Password123!
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      run: |
        # Wait for PostgreSQL to be ready
        while ! pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 2
        done
        
        # Create test database
        PGPASSWORD=Password123! psql -h localhost -p 5432 -U postgres -d postgres -c "DROP DATABASE IF EXISTS test_db;"
        PGPASSWORD=Password123! psql -h localhost -p 5432 -U postgres -d postgres -c "CREATE DATABASE test_db;"
        PGPASSWORD=Password123! psql -h localhost -p 5432 -U postgres -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE test_db TO postgres;"
      env:
        PGPASSWORD: Password123!
    
    - name: Run unit tests
      run: npm run test
      env:
        NODE_ENV: test
        CI: true
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DATABASE_USERNAME: postgres
        DATABASE_PASSWORD: Password123!
        DATABASE_NAME: test_db
        DATABASE_SSL: false
        DATABASE_SYNCHRONIZE: true
        DATABASE_LOGGING: false
        JWT_SECRET: test-jwt-secret-for-github-actions
      
    - name: Run integration tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        CI: true
        DEBUG_TEST_ENV: true
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DATABASE_USERNAME: postgres
        DATABASE_PASSWORD: Password123!
        DATABASE_NAME: test_db
        DATABASE_SSL: false
        DATABASE_SYNCHRONIZE: true
        DATABASE_LOGGING: false
        DATABASE_DROP_SCHEMA: true
        JWT_SECRET: test-jwt-secret-for-github-actions
    
    - name: Build application
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r dist deployment/
        cp -r node_modules deployment/
        cp package*.json deployment/
        cp ecosystem.config.js deployment/ || echo "ecosystem.config.js not found, skipping"
        cp .env.prod deployment/.env || echo ".env.prod not found, will create from secrets"
        cd deployment && zip -r ../deployment.zip .
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
        script: |
          # Create application directory
          sudo mkdir -p /var/www/ticket-backend
          sudo chown -R $USER:$USER /var/www/ticket-backend
          
          # Stop existing application
          pm2 stop ticket-backend || echo "Application not running"
          
          # Backup current deployment
          if [ -d "/var/www/ticket-backend/current" ]; then
            mv /var/www/ticket-backend/current /var/www/ticket-backend/backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Create new deployment directory
          mkdir -p /var/www/ticket-backend/current
    
    - name: Copy files to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
        source: deployment.zip
        target: /var/www/ticket-backend/
    
    - name: Extract and start application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
        script: |
          cd /var/www/ticket-backend
          unzip -o deployment.zip -d current/
          rm deployment.zip
          
          cd current
          
          # Update production environment variables from secrets
          if [ -f ".env" ]; then
            # Update existing .env file with production values
            sed -i "s|DATABASE_HOST=.*|DATABASE_HOST=${{ secrets.RDS_HOST }}|g" .env
            sed -i "s|DATABASE_USERNAME=.*|DATABASE_USERNAME=${{ secrets.RDS_USERNAME }}|g" .env
            sed -i "s|DATABASE_PASSWORD=.*|DATABASE_PASSWORD=${{ secrets.RDS_PASSWORD }}|g" .env
            sed -i "s|DATABASE_NAME=.*|DATABASE_NAME=${{ secrets.RDS_DATABASE }}|g" .env
            sed -i "s|JWT_SECRET=.*|JWT_SECRET=${{ secrets.JWT_SECRET }}|g" .env
            
            # Add additional production configs if not present
            grep -q "NODE_ENV=" .env || echo "NODE_ENV=production" >> .env
            grep -q "PORT=" .env || echo "PORT=4000" >> .env
            grep -q "DATABASE_SSL=" .env || echo "DATABASE_SSL=true" >> .env
            grep -q "DATABASE_SYNCHRONIZE=" .env || echo "DATABASE_SYNCHRONIZE=false" >> .env
            grep -q "SWAGGER_ENABLED=" .env || echo "SWAGGER_ENABLED=false" >> .env
          else
            # Create .env file from secrets if .env.prod was not copied
            echo "NODE_ENV=production" > .env
            echo "PORT=4000" >> .env
            echo "DATABASE_HOST=${{ secrets.RDS_HOST }}" >> .env
            echo "DATABASE_PORT=5432" >> .env
            echo "DATABASE_USERNAME=${{ secrets.RDS_USERNAME }}" >> .env
            echo "DATABASE_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> .env
            echo "DATABASE_NAME=${{ secrets.RDS_DATABASE }}" >> .env
            echo "DATABASE_SSL=true" >> .env
            echo "DATABASE_SYNCHRONIZE=false" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "SWAGGER_ENABLED=false" >> .env
          fi
          
          # Install production dependencies (if needed)
          npm ci --only=production || echo "Dependencies already installed"
          
          # Start application with PM2
          pm2 start ecosystem.config.js --env production || pm2 start dist/main.js --name ticket-backend
          pm2 save
          pm2 startup
          
          # Setup nginx reverse proxy (if not already configured)
          sudo tee /etc/nginx/sites-available/ticket-backend > /dev/null <<EOF
          server {
              listen 80;
              server_name ${{ secrets.DOMAIN_NAME }} ${{ secrets.AWS_EC2_HOST }};
              
              location / {
                  proxy_pass http://localhost:4000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
              }
              
              location /health {
                  proxy_pass http://localhost:4000/health;
                  access_log off;
              }
          }
          EOF
          
          sudo ln -sf /etc/nginx/sites-available/ticket-backend /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl reload nginx
