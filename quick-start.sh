#!/bin/bash

# Quick Start Deployment Script
# Run this script to deploy your application step by step

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}üöÄ Ticket Backend Deployment - Quick Start${NC}"
echo "============================================="
echo ""

# Step 1: Check environment configuration
echo -e "${BLUE}Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment${NC}"
echo "-------------------------------------------"

if [ ! -f ".env.prod" ]; then
    echo -e "${RED}‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env.prod${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env.prod${NC}"

# Validate environment
if ./scripts/env-manager.sh validate prod; then
    echo -e "${GREEN}‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env.prod${NC}"
    echo "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:"
    echo "- JWT_SECRET (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 32 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
    echo "- OAuth credentials (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)"
    exit 1
fi

echo ""

# Step 2: Generate JWT Secret if needed
echo -e "${BLUE}Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Secret${NC}"
echo "----------------------"

if grep -q "your-super-secret-jwt-key" .env.prod; then
    echo -e "${YELLOW}üîë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Secret ‡πÉ‡∏´‡∏°‡πà...${NC}"
    
    # Generate strong JWT secret
    JWT_SECRET=$(openssl rand -base64 64 | tr -d "=+/" | cut -c1-64)
    
    # Replace in .env.prod
    sed -i.bak "s/JWT_SECRET=.*/JWT_SECRET=$JWT_SECRET/" .env.prod
    
    echo -e "${GREEN}‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Secret ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß${NC}"
    echo "JWT Secret: $JWT_SECRET"
else
    echo -e "${GREEN}‚úÖ JWT Secret ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß${NC}"
fi

echo ""

# Step 3: Show deployment options
echo -e "${BLUE}Step 3: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ Deploy${NC}"
echo "---------------------"
echo "1. ü§ñ Auto Deploy (GitHub Actions) - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"
echo "2. üìã Manual Deploy (‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏≠‡∏á)"
echo "3. üê≥ Docker Deploy"
echo ""

read -p "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ deploy (1-3): " deploy_method

case $deploy_method in
    1)
        echo ""
        echo -e "${GREEN}ü§ñ GitHub Actions Auto Deploy${NC}"
        echo "================================"
        echo ""
        echo "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:"
        echo ""
        echo "1. üìÅ Push code ‡πÑ‡∏õ GitHub repository:"
        echo "   git add ."
        echo "   git commit -m \"Add production configuration\""
        echo "   git push origin main"
        echo ""
        echo "2. üîë ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GitHub Secrets (‡πÑ‡∏õ‡∏ó‡∏µ‡πà Settings ‚Üí Secrets and variables ‚Üí Actions):"
        echo ""
        echo "   AWS_EC2_HOST=54.221.160.173"
        echo "   AWS_EC2_USERNAME=ubuntu"
        echo "   AWS_EC2_PRIVATE_KEY=(‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå ticket-backend.pem)"
        echo ""
        echo "   RDS_HOST=database-1.c8p4wog2qp5o.us-east-1.rds.amazonaws.com"
        echo "   RDS_USERNAME=postgres"
        echo "   RDS_PASSWORD=Password123!"
        echo "   RDS_DATABASE=ticket_backend"
        echo ""
        echo "   JWT_SECRET=$JWT_SECRET"
        echo ""
        echo "3. üîß ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° EC2 Instance:"
        echo "   ssh -i ticket-backend.pem ubuntu@54.221.160.173"
        echo "   # Copy ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå scripts/setup-ec2.sh"
        echo ""
        echo "4. üóÑÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:"
        echo "   export DATABASE_HOST=\"database-1.c8p4wog2qp5o.us-east-1.rds.amazonaws.com\""
        echo "   export DATABASE_USERNAME=\"postgres\""
        echo "   export DATABASE_PASSWORD=\"Password123!\""
        echo "   ./scripts/setup-database.sh"
        echo ""
        echo "‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß push code ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏° deployment!"
        ;;
    2)
        echo ""
        echo -e "${GREEN}üìã Manual Deploy${NC}"
        echo "=================="
        echo ""
        echo "1. üèóÔ∏è Build application:"
        echo "   npm ci"
        echo "   npm run build"
        echo ""
        echo "2. üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á deployment package:"
        echo "   tar -czf deployment.tar.gz dist package*.json ecosystem.config.js .env.prod"
        echo ""
        echo "3. üöÄ Deploy ‡πÑ‡∏õ EC2:"
        echo "   scp -i ticket-backend.pem deployment.tar.gz ubuntu@54.221.160.173:/home/ubuntu/"
        echo ""
        echo "4. üìÅ Extract ‡πÅ‡∏•‡∏∞ start application:"
        echo "   ssh -i ticket-backend.pem ubuntu@54.221.160.173"
        echo "   mkdir -p /var/www/ticket-backend"
        echo "   cd /var/www/ticket-backend"
        echo "   tar -xzf ~/deployment.tar.gz"
        echo "   cp .env.prod .env"
        echo "   npm ci --only=production"
        echo "   pm2 start ecosystem.config.js --env production"
        ;;
    3)
        echo ""
        echo -e "${GREEN}üê≥ Docker Deploy${NC}"
        echo "================="
        echo ""
        echo "1. üèóÔ∏è Build Docker image:"
        echo "   docker build -t ticket-backend ."
        echo ""
        echo "2. üöÄ Run with Docker:"
        echo "   docker run -d --name ticket-backend -p 4000:4000 --env-file .env.prod ticket-backend"
        echo ""
        echo "3. üìã ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Docker Compose:"
        echo "   docker-compose up -d"
        ;;
    *)
        echo -e "${RED}‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-3 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô${NC}"
        exit 1
        ;;
esac

echo ""
echo -e "${BLUE}üìö ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:${NC}"
echo "- GitHub Secrets Setup: docs/GITHUB_SECRETS_SETUP.md"
echo "- Environment Guide: docs/ENVIRONMENT_GUIDE.md" 
echo "- Deployment Guide: docs/DEPLOYMENT.md"
echo ""
echo -e "${GREEN}üéâ ‡∏û‡∏£‡πâ‡∏≠‡∏° Deploy ‡πÅ‡∏•‡πâ‡∏ß!${NC}"
